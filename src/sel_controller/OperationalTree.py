# Copyright (c) 2015 Schweitzer Engineering Laboratories, Inc.
# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Runtime Version:4.0.30319.42000
#     Output Created 11/4/2015 11:38:15 AM
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------
import json
import datetime


class BaseHttpAccess(object):
    entity_base_name = ""
    entity_odata_type = ""
    _session = None
    api_tree_path = 'default/operational/'

    def __init__(self, session):
        self._session = session

    def read_single(self, item_id):
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        response = self._session.get_data(entity_path)
        pyson_response = json.loads(response)
        object_type = pyson_response['@odata.type'] if '@odata.type' in pyson_response else self.entity_odata_type
        result = _ResolveOdataType.getNewObject(object_type)
        result.from_pyson(pyson_response)
        return result

    def read_collection(self):
        collection_path = self.api_tree_path + self.entity_base_name 
        response = self._session.get_data(collection_path)
        pyson_response = json.loads(response)
        result = []
        raw_json_list = pyson_response['value']
        for pyson_object in raw_json_list:
            object_type = pyson_object['@odata.type'] if '@odata.type' in pyson_object else self.entity_odata_type
            new_object = _ResolveOdataType.getNewObject(object_type)
            new_object.from_pyson(pyson_object)
            result.append(new_object)
        return result

    def create_single(self, item):
        json_string = item.to_json()
        collection_path = self.api_tree_path + self.entity_base_name
        response = self._session.post_data(collection_path, json_string)
        pyson_response = json.loads(response)
        object_type = pyson_response['@odata.type'] if '@odata.type' in pyson_response else self.entity_odata_type
        result = _ResolveOdataType.getNewObject(object_type)
        result.from_pyson(pyson_response)
        return result

    def update_single(self, item, item_id):
        item_json = item.to_json()
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        response = self._session.put_data(entity_path, item_json)
        return response

    def patch_single(self, item, item_id, update_key_list):
        item_pyson = item.to_pyson()
        patch = {}
        for key in update_key_list:
            patch[key] = item_pyson[key]
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        json_string = json.dumps(patch, sort_keys=True, indent=4, separators=(',', ': '))
        response = self._session.patch_data(entity_path, json_string)
        return response

    def delete_single(self, item_id):
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        response = self._session.delete_data(entity_path)
        return response

#
# Containers and Entity Sets
#


class nodesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(nodesHttpAccess, self).__init__(session)
        self.entity_base_name = "nodes"
        self.entity_odata_type = "#Sel.Sel5056.TopologyManager.Nodes.OperationalNode"



class portsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(portsHttpAccess, self).__init__(session)
        self.entity_base_name = "ports"
        self.entity_odata_type = "#Sel.Sel5056.TopologyManager.Ports.OperationalPort"



class linksHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(linksHttpAccess, self).__init__(session)
        self.entity_base_name = "links"
        self.entity_odata_type = "#Sel.Sel5056.TopologyManager.Links.OperationalLink"



class eventsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(eventsHttpAccess, self).__init__(session)
        self.entity_base_name = "events"
        self.entity_odata_type = "#Sel.Sel5056.Common.DataBroker.Types.EventBus.Event"



class flowStatsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(flowStatsHttpAccess, self).__init__(session)
        self.entity_base_name = "flowStats"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowStats"



class groupDescHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(groupDescHttpAccess, self).__init__(session)
        self.entity_base_name = "groupDesc"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GroupDesc"



class portDescHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(portDescHttpAccess, self).__init__(session)
        self.entity_base_name = "portDesc"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortDesc"



class deviceCapabilitiesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(deviceCapabilitiesHttpAccess, self).__init__(session)
        self.entity_base_name = "deviceCapabilities"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.DeviceCapability"



class tableStatsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(tableStatsHttpAccess, self).__init__(session)
        self.entity_base_name = "tableStats"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.TableStats"



class portStatsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(portStatsHttpAccess, self).__init__(session)
        self.entity_base_name = "portStats"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortStats"



class transactionsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(transactionsHttpAccess, self).__init__(session)
        self.entity_base_name = "transactions"
        self.entity_odata_type = "#Sel.Sel5056.Common.RestBroker.Models.RestTransaction"


#
#Begin Object Set Definition
#
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types.EventBus



class EventType():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventType'
        self._type_key = TypeKey()
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _type_key = None
    _duration_setting = None
    _severity = None
    _id = None

    @property
    def type_key(self):
        return self._type_key

    @type_key.setter
    def type_key(self, value):
        self._type_key = value

    @property
    def duration_setting(self):
        return self._duration_setting

    @duration_setting.setter
    def duration_setting(self, value):
        self._duration_setting = value

    @property
    def severity(self):
        return self._severity

    @severity.setter
    def severity(self, value):
        self._severity = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['typeKey'] = self._type_key.to_pyson()
        pyson_object['durationSetting'] = self._duration_setting
        pyson_object['severity'] = self._severity
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'typeKey' in pyson_object:
            self._type_key = pyson_object['typeKey']

        if 'durationSetting' in pyson_object:
            self._duration_setting = pyson_object['durationSetting']

        if 'severity' in pyson_object:
            self._severity = pyson_object['severity']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class EventCategory():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventCategory'
        self._key = ""
        self._behaviors = []
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _key = None
    _behaviors = []
    _id = None

    @property
    def key(self):
        return self._key

    @key.setter
    def key(self, value):
        self._key = value

    @property
    def behaviors(self):
        return self._behaviors

    @behaviors.setter
    def behaviors(self, value):
        self._behaviors = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['key'] = self._key
        #Complex Copy of behaviors
        behaviors_result = []
        for item_from_behaviors in self._behaviors:
            behaviors_result.append(item_from_behaviors.to_pyson())
        pyson_object['behaviors'] = behaviors_result
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'key' in pyson_object:
            self._key = pyson_object['key']

        if 'behaviors' in pyson_object:
            self._behaviors = []
            behaviors_json_list = pyson_object['behaviors']
            for behaviors_json_element in behaviors_json_list:
                behaviors_odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.Behavior'
                if '@odata.type' in behaviors_json_element:
                    behaviors_odata_type = behaviors_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(behaviors_odata_type)
                new_element.from_pyson(behaviors_json_element)
                self._behaviors.append(new_element)
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class ClearedEventType(EventType):

    def __init__(self):
        super(ClearedEventType, self).__init__()
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.ClearedEventType'
        self._linked_type_key = TypeKey()

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _linked_type_key = None

    @property
    def linked_type_key(self):
        return self._linked_type_key

    @linked_type_key.setter
    def linked_type_key(self, value):
        self._linked_type_key = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(ClearedEventType, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['linkedTypeKey'] = self._linked_type_key.to_pyson()
        return pyson_object

    def from_pyson(self,pyson_object):
        super(ClearedEventType, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'linkedTypeKey' in pyson_object:
            self._linked_type_key = pyson_object['linkedTypeKey']

        return pyson_object


class Behavior():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.Behavior'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _behavior_type = None
    _severity = None

    @property
    def behavior_type(self):
        return self._behavior_type

    @behavior_type.setter
    def behavior_type(self, value):
        self._behavior_type = value

    @property
    def severity(self):
        return self._severity

    @severity.setter
    def severity(self, value):
        self._severity = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['behaviorType'] = self._behavior_type
        pyson_object['severity'] = self._severity
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'behaviorType' in pyson_object:
            self._behavior_type = pyson_object['behaviorType']

        if 'severity' in pyson_object:
            self._severity = pyson_object['severity']

        return pyson_object


class Event():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.Event'
        self._dictionary_arguments = []
        self._category = EventCategory()
        self._event_type = EventType()
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _dictionary_arguments = []
    _state = None
    _category = None
    _event_type = None
    _id = None

    @property
    def dictionary_arguments(self):
        return self._dictionary_arguments

    @dictionary_arguments.setter
    def dictionary_arguments(self, value):
        self._dictionary_arguments = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def category(self):
        return self._category

    @category.setter
    def category(self, value):
        self._category = value

    @property
    def event_type(self):
        return self._event_type

    @event_type.setter
    def event_type(self, value):
        self._event_type = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['dictionaryArguments'] = list( self._dictionary_arguments )
        pyson_object['state'] = self._state
        pyson_object['category'] = self._category.to_pyson()
        pyson_object['eventType'] = self._event_type.to_pyson()
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'dictionaryArguments' in pyson_object:
            self._dictionary_arguments = list(pyson_object['dictionaryArguments'])

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'category' in pyson_object:
            self._category = pyson_object['category']

        if 'eventType' in pyson_object:
            self._event_type = pyson_object['eventType']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object
# Odata Namespace Sel.Sel5056.OpenFlowPlugin.DataTreeObjects



class Action():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action'
        self._set_order = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _action_type = None
    _set_order = None

    @property
    def action_type(self):
        return self._action_type

    @action_type.setter
    def action_type(self, value):
        self._action_type = value

    @property
    def set_order(self):
        return self._set_order

    @set_order.setter
    def set_order(self, value):
        self._set_order = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['actionType'] = self._action_type
        pyson_object['setOrder'] = self._set_order
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'actionType' in pyson_object:
            self._action_type = pyson_object['actionType']

        if 'setOrder' in pyson_object:
            self._set_order = pyson_object['setOrder']

        return pyson_object


class GroupAction(Action):

    def __init__(self):
        super(GroupAction, self).__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GroupAction'
        self._group_id = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _group_id = None

    @property
    def group_id(self):
        return self._group_id

    @group_id.setter
    def group_id(self, value):
        self._group_id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(GroupAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['groupId'] = self._group_id
        return pyson_object

    def from_pyson(self,pyson_object):
        super(GroupAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'groupId' in pyson_object:
            self._group_id = pyson_object['groupId']

        return pyson_object


class OutputAction(Action):

    def __init__(self):
        super(OutputAction, self).__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.OutputAction'
        self._out_port = 0
        self._max_length = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _out_port = None
    _max_length = None

    @property
    def out_port(self):
        return self._out_port

    @out_port.setter
    def out_port(self, value):
        self._out_port = value

    @property
    def max_length(self):
        return self._max_length

    @max_length.setter
    def max_length(self, value):
        self._max_length = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(OutputAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['outPort'] = self._out_port
        pyson_object['maxLength'] = self._max_length
        return pyson_object

    def from_pyson(self,pyson_object):
        super(OutputAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'outPort' in pyson_object:
            self._out_port = pyson_object['outPort']

        if 'maxLength' in pyson_object:
            self._max_length = pyson_object['maxLength']

        return pyson_object


class PushVlanAction(Action):

    def __init__(self):
        super(PushVlanAction, self).__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PushVlanAction'
        self._ether_type = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _ether_type = None

    @property
    def ether_type(self):
        return self._ether_type

    @ether_type.setter
    def ether_type(self, value):
        self._ether_type = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(PushVlanAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['etherType'] = self._ether_type
        return pyson_object

    def from_pyson(self,pyson_object):
        super(PushVlanAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'etherType' in pyson_object:
            self._ether_type = pyson_object['etherType']

        return pyson_object


class PopVlanAction(Action):

    def __init__(self):
        super(PopVlanAction, self).__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PopVlanAction'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string


    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(PopVlanAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        super(PopVlanAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object


class Match():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Match'
        self._in_port = ""
        self._eth_dst = ""
        self._eth_src = ""
        self._ipv4_dst = ""
        self._ipv4_src = ""
        self._eth_type = ""
        self._tcp_src = ""
        self._tcp_dst = ""
        self._udp_src = ""
        self._udp_dst = ""
        self._vlan_vid = ""
        self._vlan_pcp = ""
        self._ip_proto = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _in_port = None
    _eth_dst = None
    _eth_src = None
    _ipv4_dst = None
    _ipv4_src = None
    _eth_type = None
    _tcp_src = None
    _tcp_dst = None
    _udp_src = None
    _udp_dst = None
    _vlan_vid = None
    _vlan_pcp = None
    _ip_proto = None

    @property
    def in_port(self):
        return self._in_port

    @in_port.setter
    def in_port(self, value):
        self._in_port = value

    @property
    def eth_dst(self):
        return self._eth_dst

    @eth_dst.setter
    def eth_dst(self, value):
        self._eth_dst = value

    @property
    def eth_src(self):
        return self._eth_src

    @eth_src.setter
    def eth_src(self, value):
        self._eth_src = value

    @property
    def ipv4_dst(self):
        return self._ipv4_dst

    @ipv4_dst.setter
    def ipv4_dst(self, value):
        self._ipv4_dst = value

    @property
    def ipv4_src(self):
        return self._ipv4_src

    @ipv4_src.setter
    def ipv4_src(self, value):
        self._ipv4_src = value

    @property
    def eth_type(self):
        return self._eth_type

    @eth_type.setter
    def eth_type(self, value):
        self._eth_type = value

    @property
    def tcp_src(self):
        return self._tcp_src

    @tcp_src.setter
    def tcp_src(self, value):
        self._tcp_src = value

    @property
    def tcp_dst(self):
        return self._tcp_dst

    @tcp_dst.setter
    def tcp_dst(self, value):
        self._tcp_dst = value

    @property
    def udp_src(self):
        return self._udp_src

    @udp_src.setter
    def udp_src(self, value):
        self._udp_src = value

    @property
    def udp_dst(self):
        return self._udp_dst

    @udp_dst.setter
    def udp_dst(self, value):
        self._udp_dst = value

    @property
    def vlan_vid(self):
        return self._vlan_vid

    @vlan_vid.setter
    def vlan_vid(self, value):
        self._vlan_vid = value

    @property
    def vlan_pcp(self):
        return self._vlan_pcp

    @vlan_pcp.setter
    def vlan_pcp(self, value):
        self._vlan_pcp = value

    @property
    def ip_proto(self):
        return self._ip_proto

    @ip_proto.setter
    def ip_proto(self, value):
        self._ip_proto = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['inPort'] = self._in_port
        pyson_object['ethDst'] = self._eth_dst
        pyson_object['ethSrc'] = self._eth_src
        pyson_object['ipv4Dst'] = self._ipv4_dst
        pyson_object['ipv4Src'] = self._ipv4_src
        pyson_object['ethType'] = self._eth_type
        pyson_object['tcpSrc'] = self._tcp_src
        pyson_object['tcpDst'] = self._tcp_dst
        pyson_object['udpSrc'] = self._udp_src
        pyson_object['udpDst'] = self._udp_dst
        pyson_object['vlanVid'] = self._vlan_vid
        pyson_object['vlanPcp'] = self._vlan_pcp
        pyson_object['ipProto'] = self._ip_proto
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'inPort' in pyson_object:
            self._in_port = pyson_object['inPort']

        if 'ethDst' in pyson_object:
            self._eth_dst = pyson_object['ethDst']

        if 'ethSrc' in pyson_object:
            self._eth_src = pyson_object['ethSrc']

        if 'ipv4Dst' in pyson_object:
            self._ipv4_dst = pyson_object['ipv4Dst']

        if 'ipv4Src' in pyson_object:
            self._ipv4_src = pyson_object['ipv4Src']

        if 'ethType' in pyson_object:
            self._eth_type = pyson_object['ethType']

        if 'tcpSrc' in pyson_object:
            self._tcp_src = pyson_object['tcpSrc']

        if 'tcpDst' in pyson_object:
            self._tcp_dst = pyson_object['tcpDst']

        if 'udpSrc' in pyson_object:
            self._udp_src = pyson_object['udpSrc']

        if 'udpDst' in pyson_object:
            self._udp_dst = pyson_object['udpDst']

        if 'vlanVid' in pyson_object:
            self._vlan_vid = pyson_object['vlanVid']

        if 'vlanPcp' in pyson_object:
            self._vlan_pcp = pyson_object['vlanPcp']

        if 'ipProto' in pyson_object:
            self._ip_proto = pyson_object['ipProto']

        return pyson_object


class Instruction():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Instruction'
        self._actions = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _instruction_type = None
    _actions = []

    @property
    def instruction_type(self):
        return self._instruction_type

    @instruction_type.setter
    def instruction_type(self, value):
        self._instruction_type = value

    @property
    def actions(self):
        return self._actions

    @actions.setter
    def actions(self, value):
        self._actions = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['instructionType'] = self._instruction_type
        #Complex Copy of actions
        actions_result = []
        for item_from_actions in self._actions:
            actions_result.append(item_from_actions.to_pyson())
        pyson_object['actions'] = actions_result
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'instructionType' in pyson_object:
            self._instruction_type = pyson_object['instructionType']

        if 'actions' in pyson_object:
            self._actions = []
            actions_json_list = pyson_object['actions']
            for actions_json_element in actions_json_list:
                actions_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action'
                if '@odata.type' in actions_json_element:
                    actions_odata_type = actions_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(actions_odata_type)
                new_element.from_pyson(actions_json_element)
                self._actions.append(new_element)
        return pyson_object


class Port():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Port'
        self._advertised = 0
        self._config = 0
        self._curr = 0
        self._current_speed = 0
        self._hardware_address = ""
        self._max_speed = 0
        self._name = ""
        self._port_id = 0
        self._peer = 0
        self._supported = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _advertised = None
    _config = None
    _curr = None
    _current_speed = None
    _hardware_address = None
    _max_speed = None
    _name = None
    _port_id = None
    _peer = None
    _state = None
    _supported = None

    @property
    def advertised(self):
        return self._advertised

    @advertised.setter
    def advertised(self, value):
        self._advertised = value

    @property
    def config(self):
        return self._config

    @config.setter
    def config(self, value):
        self._config = value

    @property
    def curr(self):
        return self._curr

    @curr.setter
    def curr(self, value):
        self._curr = value

    @property
    def current_speed(self):
        return self._current_speed

    @current_speed.setter
    def current_speed(self, value):
        self._current_speed = value

    @property
    def hardware_address(self):
        return self._hardware_address

    @hardware_address.setter
    def hardware_address(self, value):
        self._hardware_address = value

    @property
    def max_speed(self):
        return self._max_speed

    @max_speed.setter
    def max_speed(self, value):
        self._max_speed = value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def port_id(self):
        return self._port_id

    @port_id.setter
    def port_id(self, value):
        self._port_id = value

    @property
    def peer(self):
        return self._peer

    @peer.setter
    def peer(self, value):
        self._peer = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def supported(self):
        return self._supported

    @supported.setter
    def supported(self, value):
        self._supported = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['advertised'] = self._advertised
        pyson_object['config'] = self._config
        pyson_object['curr'] = self._curr
        pyson_object['currentSpeed'] = self._current_speed
        pyson_object['hardwareAddress'] = self._hardware_address
        pyson_object['maxSpeed'] = self._max_speed
        pyson_object['name'] = self._name
        pyson_object['portId'] = self._port_id
        pyson_object['peer'] = self._peer
        pyson_object['state'] = self._state
        pyson_object['supported'] = self._supported
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'advertised' in pyson_object:
            self._advertised = pyson_object['advertised']

        if 'config' in pyson_object:
            self._config = pyson_object['config']

        if 'curr' in pyson_object:
            self._curr = pyson_object['curr']

        if 'currentSpeed' in pyson_object:
            self._current_speed = pyson_object['currentSpeed']

        if 'hardwareAddress' in pyson_object:
            self._hardware_address = pyson_object['hardwareAddress']

        if 'maxSpeed' in pyson_object:
            self._max_speed = pyson_object['maxSpeed']

        if 'name' in pyson_object:
            self._name = pyson_object['name']

        if 'portId' in pyson_object:
            self._port_id = pyson_object['portId']

        if 'peer' in pyson_object:
            self._peer = pyson_object['peer']

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'supported' in pyson_object:
            self._supported = pyson_object['supported']

        return pyson_object


class ApplyActions(Instruction):

    def __init__(self):
        super(ApplyActions, self).__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.ApplyActions'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string


    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(ApplyActions, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        super(ApplyActions, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object


class GoToTable(Instruction):

    def __init__(self):
        super(GoToTable, self).__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GoToTable'
        self._table_id = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _table_id = None

    @property
    def table_id(self):
        return self._table_id

    @table_id.setter
    def table_id(self, value):
        self._table_id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(GoToTable, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['tableId'] = self._table_id
        return pyson_object

    def from_pyson(self,pyson_object):
        super(GoToTable, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'tableId' in pyson_object:
            self._table_id = pyson_object['tableId']

        return pyson_object


class WriteActions(Instruction):

    def __init__(self):
        super(WriteActions, self).__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.WriteActions'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string


    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(WriteActions, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        super(WriteActions, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object


class FlowStat():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowStat'
        self._byte_count = 0
        self._cookie = 0
        self._duration_n_sec = 0
        self._duration_sec = 0
        self._flags = 0
        self._hard_timeout = 0
        self._idle_timeout = 0
        self._packet_count = 0
        self._priority = 0
        self._table_id = 0
        self._match = Match()
        self._instructions = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _byte_count = None
    _cookie = None
    _duration_n_sec = None
    _duration_sec = None
    _flags = None
    _hard_timeout = None
    _idle_timeout = None
    _packet_count = None
    _priority = None
    _table_id = None
    _match = None
    _instructions = []

    @property
    def byte_count(self):
        return self._byte_count

    @byte_count.setter
    def byte_count(self, value):
        self._byte_count = value

    @property
    def cookie(self):
        return self._cookie

    @cookie.setter
    def cookie(self, value):
        self._cookie = value

    @property
    def duration_n_sec(self):
        return self._duration_n_sec

    @duration_n_sec.setter
    def duration_n_sec(self, value):
        self._duration_n_sec = value

    @property
    def duration_sec(self):
        return self._duration_sec

    @duration_sec.setter
    def duration_sec(self, value):
        self._duration_sec = value

    @property
    def flags(self):
        return self._flags

    @flags.setter
    def flags(self, value):
        self._flags = value

    @property
    def hard_timeout(self):
        return self._hard_timeout

    @hard_timeout.setter
    def hard_timeout(self, value):
        self._hard_timeout = value

    @property
    def idle_timeout(self):
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, value):
        self._idle_timeout = value

    @property
    def packet_count(self):
        return self._packet_count

    @packet_count.setter
    def packet_count(self, value):
        self._packet_count = value

    @property
    def priority(self):
        return self._priority

    @priority.setter
    def priority(self, value):
        self._priority = value

    @property
    def table_id(self):
        return self._table_id

    @table_id.setter
    def table_id(self, value):
        self._table_id = value

    @property
    def match(self):
        return self._match

    @match.setter
    def match(self, value):
        self._match = value

    @property
    def instructions(self):
        return self._instructions

    @instructions.setter
    def instructions(self, value):
        self._instructions = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['byteCount'] = self._byte_count
        pyson_object['cookie'] = self._cookie
        pyson_object['durationNSec'] = self._duration_n_sec
        pyson_object['durationSec'] = self._duration_sec
        pyson_object['flags'] = self._flags
        pyson_object['hardTimeout'] = self._hard_timeout
        pyson_object['idleTimeout'] = self._idle_timeout
        pyson_object['packetCount'] = self._packet_count
        pyson_object['priority'] = self._priority
        pyson_object['tableId'] = self._table_id
        pyson_object['match'] = self._match.to_pyson()
        #Complex Copy of instructions
        instructions_result = []
        for item_from_instructions in self._instructions:
            instructions_result.append(item_from_instructions.to_pyson())
        pyson_object['instructions'] = instructions_result
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'byteCount' in pyson_object:
            self._byte_count = pyson_object['byteCount']

        if 'cookie' in pyson_object:
            self._cookie = pyson_object['cookie']

        if 'durationNSec' in pyson_object:
            self._duration_n_sec = pyson_object['durationNSec']

        if 'durationSec' in pyson_object:
            self._duration_sec = pyson_object['durationSec']

        if 'flags' in pyson_object:
            self._flags = pyson_object['flags']

        if 'hardTimeout' in pyson_object:
            self._hard_timeout = pyson_object['hardTimeout']

        if 'idleTimeout' in pyson_object:
            self._idle_timeout = pyson_object['idleTimeout']

        if 'packetCount' in pyson_object:
            self._packet_count = pyson_object['packetCount']

        if 'priority' in pyson_object:
            self._priority = pyson_object['priority']

        if 'tableId' in pyson_object:
            self._table_id = pyson_object['tableId']

        if 'match' in pyson_object:
            self._match = Match()
            self._match.from_pyson(pyson_object['match'])

        if 'instructions' in pyson_object:
            self._instructions = []
            instructions_json_list = pyson_object['instructions']
            for instructions_json_element in instructions_json_list:
                instructions_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Instruction'
                if '@odata.type' in instructions_json_element:
                    instructions_odata_type = instructions_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(instructions_odata_type)
                new_element.from_pyson(instructions_json_element)
                self._instructions.append(new_element)
        return pyson_object


class TableStat():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.TableStat'
        self._table_id = 0
        self._lookup_count = 0
        self._active_count = 0
        self._match_count = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _table_id = None
    _lookup_count = None
    _active_count = None
    _match_count = None

    @property
    def table_id(self):
        return self._table_id

    @table_id.setter
    def table_id(self, value):
        self._table_id = value

    @property
    def lookup_count(self):
        return self._lookup_count

    @lookup_count.setter
    def lookup_count(self, value):
        self._lookup_count = value

    @property
    def active_count(self):
        return self._active_count

    @active_count.setter
    def active_count(self, value):
        self._active_count = value

    @property
    def match_count(self):
        return self._match_count

    @match_count.setter
    def match_count(self, value):
        self._match_count = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['tableId'] = self._table_id
        pyson_object['lookupCount'] = self._lookup_count
        pyson_object['activeCount'] = self._active_count
        pyson_object['matchCount'] = self._match_count
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'tableId' in pyson_object:
            self._table_id = pyson_object['tableId']

        if 'lookupCount' in pyson_object:
            self._lookup_count = pyson_object['lookupCount']

        if 'activeCount' in pyson_object:
            self._active_count = pyson_object['activeCount']

        if 'matchCount' in pyson_object:
            self._match_count = pyson_object['matchCount']

        return pyson_object


class PortStat():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortStat'
        self._collisions = 0
        self._port_no = 0
        self._rx_crc_err = 0
        self._rx_dropped = 0
        self._rx_errors = 0
        self._rx_frame_err = 0
        self._rx_over_error = 0
        self._rx_packets = 0
        self._rx_bytes = 0
        self._tx_bytes = 0
        self._tx_dropped = 0
        self._tx_errors = 0
        self._tx_packets = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _collisions = None
    _port_no = None
    _rx_crc_err = None
    _rx_dropped = None
    _rx_errors = None
    _rx_frame_err = None
    _rx_over_error = None
    _rx_packets = None
    _rx_bytes = None
    _tx_bytes = None
    _tx_dropped = None
    _tx_errors = None
    _tx_packets = None

    @property
    def collisions(self):
        return self._collisions

    @collisions.setter
    def collisions(self, value):
        self._collisions = value

    @property
    def port_no(self):
        return self._port_no

    @port_no.setter
    def port_no(self, value):
        self._port_no = value

    @property
    def rx_crc_err(self):
        return self._rx_crc_err

    @rx_crc_err.setter
    def rx_crc_err(self, value):
        self._rx_crc_err = value

    @property
    def rx_dropped(self):
        return self._rx_dropped

    @rx_dropped.setter
    def rx_dropped(self, value):
        self._rx_dropped = value

    @property
    def rx_errors(self):
        return self._rx_errors

    @rx_errors.setter
    def rx_errors(self, value):
        self._rx_errors = value

    @property
    def rx_frame_err(self):
        return self._rx_frame_err

    @rx_frame_err.setter
    def rx_frame_err(self, value):
        self._rx_frame_err = value

    @property
    def rx_over_error(self):
        return self._rx_over_error

    @rx_over_error.setter
    def rx_over_error(self, value):
        self._rx_over_error = value

    @property
    def rx_packets(self):
        return self._rx_packets

    @rx_packets.setter
    def rx_packets(self, value):
        self._rx_packets = value

    @property
    def rx_bytes(self):
        return self._rx_bytes

    @rx_bytes.setter
    def rx_bytes(self, value):
        self._rx_bytes = value

    @property
    def tx_bytes(self):
        return self._tx_bytes

    @tx_bytes.setter
    def tx_bytes(self, value):
        self._tx_bytes = value

    @property
    def tx_dropped(self):
        return self._tx_dropped

    @tx_dropped.setter
    def tx_dropped(self, value):
        self._tx_dropped = value

    @property
    def tx_errors(self):
        return self._tx_errors

    @tx_errors.setter
    def tx_errors(self, value):
        self._tx_errors = value

    @property
    def tx_packets(self):
        return self._tx_packets

    @tx_packets.setter
    def tx_packets(self, value):
        self._tx_packets = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['collisions'] = self._collisions
        pyson_object['portNo'] = self._port_no
        pyson_object['rxCrcErr'] = self._rx_crc_err
        pyson_object['rxDropped'] = self._rx_dropped
        pyson_object['rxErrors'] = self._rx_errors
        pyson_object['rxFrameErr'] = self._rx_frame_err
        pyson_object['rxOverError'] = self._rx_over_error
        pyson_object['rxPackets'] = self._rx_packets
        pyson_object['rxBytes'] = self._rx_bytes
        pyson_object['txBytes'] = self._tx_bytes
        pyson_object['txDropped'] = self._tx_dropped
        pyson_object['txErrors'] = self._tx_errors
        pyson_object['txPackets'] = self._tx_packets
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'collisions' in pyson_object:
            self._collisions = pyson_object['collisions']

        if 'portNo' in pyson_object:
            self._port_no = pyson_object['portNo']

        if 'rxCrcErr' in pyson_object:
            self._rx_crc_err = pyson_object['rxCrcErr']

        if 'rxDropped' in pyson_object:
            self._rx_dropped = pyson_object['rxDropped']

        if 'rxErrors' in pyson_object:
            self._rx_errors = pyson_object['rxErrors']

        if 'rxFrameErr' in pyson_object:
            self._rx_frame_err = pyson_object['rxFrameErr']

        if 'rxOverError' in pyson_object:
            self._rx_over_error = pyson_object['rxOverError']

        if 'rxPackets' in pyson_object:
            self._rx_packets = pyson_object['rxPackets']

        if 'rxBytes' in pyson_object:
            self._rx_bytes = pyson_object['rxBytes']

        if 'txBytes' in pyson_object:
            self._tx_bytes = pyson_object['txBytes']

        if 'txDropped' in pyson_object:
            self._tx_dropped = pyson_object['txDropped']

        if 'txErrors' in pyson_object:
            self._tx_errors = pyson_object['txErrors']

        if 'txPackets' in pyson_object:
            self._tx_packets = pyson_object['txPackets']

        return pyson_object


class FlowStats():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowStats'
        self._stats = []
        self._data_path_id = 0
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _stats = []
    _data_path_id = None
    _id = None

    @property
    def stats(self):
        return self._stats

    @stats.setter
    def stats(self, value):
        self._stats = value

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        #Complex Copy of stats
        stats_result = []
        for item_from_stats in self._stats:
            stats_result.append(item_from_stats.to_pyson())
        pyson_object['stats'] = stats_result
        pyson_object['dataPathId'] = self._data_path_id
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'stats' in pyson_object:
            self._stats = []
            stats_json_list = pyson_object['stats']
            for stats_json_element in stats_json_list:
                stats_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowStat'
                if '@odata.type' in stats_json_element:
                    stats_odata_type = stats_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(stats_odata_type)
                new_element.from_pyson(stats_json_element)
                self._stats.append(new_element)
        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class GroupDesc():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GroupDesc'
        self._data_path_id = 0
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _data_path_id = None
    _id = None

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['dataPathId'] = self._data_path_id
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class PortDesc():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortDesc'
        self._data_path_id = 0
        self._ports = []
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _data_path_id = None
    _ports = []
    _id = None

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    @property
    def ports(self):
        return self._ports

    @ports.setter
    def ports(self, value):
        self._ports = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['dataPathId'] = self._data_path_id
        #Complex Copy of ports
        ports_result = []
        for item_from_ports in self._ports:
            ports_result.append(item_from_ports.to_pyson())
        pyson_object['ports'] = ports_result
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        if 'ports' in pyson_object:
            self._ports = []
            ports_json_list = pyson_object['ports']
            for ports_json_element in ports_json_list:
                ports_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Port'
                if '@odata.type' in ports_json_element:
                    ports_odata_type = ports_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(ports_odata_type)
                new_element.from_pyson(ports_json_element)
                self._ports.append(new_element)
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class DeviceCapability():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.DeviceCapability'
        self._protocol = ""
        self._version = ""
        self._data_path_id = 0
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _protocol = None
    _version = None
    _data_path_id = None
    _id = None

    @property
    def protocol(self):
        return self._protocol

    @protocol.setter
    def protocol(self, value):
        self._protocol = value

    @property
    def version(self):
        return self._version

    @version.setter
    def version(self, value):
        self._version = value

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['protocol'] = self._protocol
        pyson_object['version'] = self._version
        pyson_object['dataPathId'] = self._data_path_id
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'protocol' in pyson_object:
            self._protocol = pyson_object['protocol']

        if 'version' in pyson_object:
            self._version = pyson_object['version']

        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class TableStats():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.TableStats'
        self._table_stat_list = []
        self._data_path_id = 0
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _table_stat_list = []
    _data_path_id = None
    _id = None

    @property
    def table_stat_list(self):
        return self._table_stat_list

    @table_stat_list.setter
    def table_stat_list(self, value):
        self._table_stat_list = value

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        #Complex Copy of tableStatList
        table_stat_list_result = []
        for item_from_table_stat_list in self._table_stat_list:
            table_stat_list_result.append(item_from_table_stat_list.to_pyson())
        pyson_object['tableStatList'] = table_stat_list_result
        pyson_object['dataPathId'] = self._data_path_id
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'tableStatList' in pyson_object:
            self._table_stat_list = []
            table_stat_list_json_list = pyson_object['tableStatList']
            for table_stat_list_json_element in table_stat_list_json_list:
                table_stat_list_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.TableStat'
                if '@odata.type' in table_stat_list_json_element:
                    table_stat_list_odata_type = table_stat_list_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(table_stat_list_odata_type)
                new_element.from_pyson(table_stat_list_json_element)
                self._table_stat_list.append(new_element)
        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class PortStats():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortStats'
        self._port_stat_list = []
        self._data_path_id = 0
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _port_stat_list = []
    _data_path_id = None
    _id = None

    @property
    def port_stat_list(self):
        return self._port_stat_list

    @port_stat_list.setter
    def port_stat_list(self, value):
        self._port_stat_list = value

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        #Complex Copy of portStatList
        port_stat_list_result = []
        for item_from_port_stat_list in self._port_stat_list:
            port_stat_list_result.append(item_from_port_stat_list.to_pyson())
        pyson_object['portStatList'] = port_stat_list_result
        pyson_object['dataPathId'] = self._data_path_id
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'portStatList' in pyson_object:
            self._port_stat_list = []
            port_stat_list_json_list = pyson_object['portStatList']
            for port_stat_list_json_element in port_stat_list_json_list:
                port_stat_list_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortStat'
                if '@odata.type' in port_stat_list_json_element:
                    port_stat_list_odata_type = port_stat_list_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(port_stat_list_odata_type)
                new_element.from_pyson(port_stat_list_json_element)
                self._port_stat_list.append(new_element)
        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class Group():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Group'
        self._node = ""
        self._group_id = 0
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _node = None
    _group_type = None
    _group_id = None
    _id = None

    @property
    def node(self):
        return self._node

    @node.setter
    def node(self, value):
        self._node = value

    @property
    def group_type(self):
        return self._group_type

    @group_type.setter
    def group_type(self, value):
        self._group_type = value

    @property
    def group_id(self):
        return self._group_id

    @group_id.setter
    def group_id(self, value):
        self._group_id = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['node'] = self._node
        pyson_object['groupType'] = self._group_type
        pyson_object['groupId'] = self._group_id
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'node' in pyson_object:
            self._node = pyson_object['node']

        if 'groupType' in pyson_object:
            self._group_type = pyson_object['groupType']

        if 'groupId' in pyson_object:
            self._group_id = pyson_object['groupId']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class Bucket():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Bucket'
        self._id = ""
        self._watch_port = 0
        self._watch_group = 0
        self._actions = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _id = None
    _watch_port = None
    _watch_group = None
    _actions = []

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def watch_port(self):
        return self._watch_port

    @watch_port.setter
    def watch_port(self, value):
        self._watch_port = value

    @property
    def watch_group(self):
        return self._watch_group

    @watch_group.setter
    def watch_group(self, value):
        self._watch_group = value

    @property
    def actions(self):
        return self._actions

    @actions.setter
    def actions(self, value):
        self._actions = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['id'] = self._id
        pyson_object['watchPort'] = self._watch_port
        pyson_object['watchGroup'] = self._watch_group
        #Complex Copy of actions
        actions_result = []
        for item_from_actions in self._actions:
            actions_result.append(item_from_actions.to_pyson())
        pyson_object['actions'] = actions_result
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        if 'watchPort' in pyson_object:
            self._watch_port = pyson_object['watchPort']

        if 'watchGroup' in pyson_object:
            self._watch_group = pyson_object['watchGroup']

        if 'actions' in pyson_object:
            self._actions = []
            actions_json_list = pyson_object['actions']
            for actions_json_element in actions_json_list:
                actions_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action'
                if '@odata.type' in actions_json_element:
                    actions_odata_type = actions_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(actions_odata_type)
                new_element.from_pyson(actions_json_element)
                self._actions.append(new_element)
        return pyson_object
# Odata Namespace Sel.Sel5056.TopologyManager.Nodes



class OperationalNode(object):

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.TopologyManager.Nodes.OperationalNode'
        self._is_connected = False
        self._mac = ""
        self._discoverer_list = []
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _is_connected = None
    _mac = None
    _discoverer_list = []
    _state = None
    _id = None

    @property
    def is_connected(self):
        return self._is_connected

    @is_connected.setter
    def is_connected(self, value):
        self._is_connected = value

    @property
    def mac(self):
        return self._mac

    @mac.setter
    def mac(self, value):
        self._mac = value

    @property
    def discoverer_list(self):
        return self._discoverer_list

    @discoverer_list.setter
    def discoverer_list(self, value):
        self._discoverer_list = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['isConnected'] = self._is_connected
        pyson_object['mac'] = self._mac
        pyson_object['discovererList'] = list( self._discoverer_list )
        pyson_object['state'] = self._state
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'isConnected' in pyson_object:
            self._is_connected = pyson_object['isConnected']

        if 'mac' in pyson_object:
            self._mac = pyson_object['mac']

        if 'discovererList' in pyson_object:
            self._discoverer_list = list(pyson_object['discovererList'])

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class OpenFlowNode(OperationalNode):

    def __init__(self):
        super(OpenFlowNode, self).__init__()
        self._odata_type = '#Sel.Sel5056.TopologyManager.Nodes.OpenFlowNode'
        self._ip_address = ""
        self._name = ""
        self._data_path_id = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _ip_address = None
    _name = None
    _data_path_id = None

    @property
    def ip_address(self):
        return self._ip_address

    @ip_address.setter
    def ip_address(self, value):
        self._ip_address = value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(OpenFlowNode, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['ipAddress'] = self._ip_address
        pyson_object['name'] = self._name
        pyson_object['dataPathId'] = self._data_path_id
        return pyson_object

    def from_pyson(self,pyson_object):
        super(OpenFlowNode, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'ipAddress' in pyson_object:
            self._ip_address = pyson_object['ipAddress']

        if 'name' in pyson_object:
            self._name = pyson_object['name']

        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        return pyson_object
# Odata Namespace Sel.Sel5056.TopologyManager.Ports



class OperationalPort(object):

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.TopologyManager.Ports.OperationalPort'
        self._parent_node = ""
        self._is_connected = False
        self._discoverer_list = []
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _parent_node = None
    _is_connected = None
    _discoverer_list = []
    _state = None
    _id = None

    @property
    def parent_node(self):
        return self._parent_node

    @parent_node.setter
    def parent_node(self, value):
        self._parent_node = value

    @property
    def is_connected(self):
        return self._is_connected

    @is_connected.setter
    def is_connected(self, value):
        self._is_connected = value

    @property
    def discoverer_list(self):
        return self._discoverer_list

    @discoverer_list.setter
    def discoverer_list(self, value):
        self._discoverer_list = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['parentNode'] = self._parent_node
        pyson_object['isConnected'] = self._is_connected
        pyson_object['discovererList'] = list( self._discoverer_list )
        pyson_object['state'] = self._state
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'parentNode' in pyson_object:
            self._parent_node = pyson_object['parentNode']

        if 'isConnected' in pyson_object:
            self._is_connected = pyson_object['isConnected']

        if 'discovererList' in pyson_object:
            self._discoverer_list = list(pyson_object['discovererList'])

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class EthernetPort(OperationalPort):

    def __init__(self):
        super(EthernetPort, self).__init__()
        self._odata_type = '#Sel.Sel5056.TopologyManager.Ports.EthernetPort'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string


    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(EthernetPort, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        super(EthernetPort, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object


class OpenFlowPort(EthernetPort):

    def __init__(self):
        super(OpenFlowPort, self).__init__()
        self._odata_type = '#Sel.Sel5056.TopologyManager.Ports.OpenFlowPort'
        self._data_path_id = 0
        self._advertised = 0
        self._config = 0
        self._current_features = 0
        self._current_speed = 0
        self._hardware_address = ""
        self._max_speed = 0
        self._name = ""
        self._port_id = 0
        self._peer = 0
        self._supported = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _data_path_id = None
    _advertised = None
    _config = None
    _current_features = None
    _current_speed = None
    _hardware_address = None
    _max_speed = None
    _name = None
    _port_id = None
    _peer = None
    _of_state = None
    _supported = None

    @property
    def data_path_id(self):
        return self._data_path_id

    @data_path_id.setter
    def data_path_id(self, value):
        self._data_path_id = value

    @property
    def advertised(self):
        return self._advertised

    @advertised.setter
    def advertised(self, value):
        self._advertised = value

    @property
    def config(self):
        return self._config

    @config.setter
    def config(self, value):
        self._config = value

    @property
    def current_features(self):
        return self._current_features

    @current_features.setter
    def current_features(self, value):
        self._current_features = value

    @property
    def current_speed(self):
        return self._current_speed

    @current_speed.setter
    def current_speed(self, value):
        self._current_speed = value

    @property
    def hardware_address(self):
        return self._hardware_address

    @hardware_address.setter
    def hardware_address(self, value):
        self._hardware_address = value

    @property
    def max_speed(self):
        return self._max_speed

    @max_speed.setter
    def max_speed(self, value):
        self._max_speed = value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def port_id(self):
        return self._port_id

    @port_id.setter
    def port_id(self, value):
        self._port_id = value

    @property
    def peer(self):
        return self._peer

    @peer.setter
    def peer(self, value):
        self._peer = value

    @property
    def of_state(self):
        return self._of_state

    @of_state.setter
    def of_state(self, value):
        self._of_state = value

    @property
    def supported(self):
        return self._supported

    @supported.setter
    def supported(self, value):
        self._supported = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(OpenFlowPort, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['dataPathId'] = self._data_path_id
        pyson_object['advertised'] = self._advertised
        pyson_object['config'] = self._config
        pyson_object['currentFeatures'] = self._current_features
        pyson_object['currentSpeed'] = self._current_speed
        pyson_object['hardwareAddress'] = self._hardware_address
        pyson_object['maxSpeed'] = self._max_speed
        pyson_object['name'] = self._name
        pyson_object['portId'] = self._port_id
        pyson_object['peer'] = self._peer
        pyson_object['ofState'] = self._of_state
        pyson_object['supported'] = self._supported
        return pyson_object

    def from_pyson(self,pyson_object):
        super(OpenFlowPort, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'dataPathId' in pyson_object:
            self._data_path_id = pyson_object['dataPathId']

        if 'advertised' in pyson_object:
            self._advertised = pyson_object['advertised']

        if 'config' in pyson_object:
            self._config = pyson_object['config']

        if 'currentFeatures' in pyson_object:
            self._current_features = pyson_object['currentFeatures']

        if 'currentSpeed' in pyson_object:
            self._current_speed = pyson_object['currentSpeed']

        if 'hardwareAddress' in pyson_object:
            self._hardware_address = pyson_object['hardwareAddress']

        if 'maxSpeed' in pyson_object:
            self._max_speed = pyson_object['maxSpeed']

        if 'name' in pyson_object:
            self._name = pyson_object['name']

        if 'portId' in pyson_object:
            self._port_id = pyson_object['portId']

        if 'peer' in pyson_object:
            self._peer = pyson_object['peer']

        if 'ofState' in pyson_object:
            self._of_state = pyson_object['ofState']

        if 'supported' in pyson_object:
            self._supported = pyson_object['supported']

        return pyson_object
# Odata Namespace Sel.Sel5056.TopologyManager.Links



class OperationalLink():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.TopologyManager.Links.OperationalLink'
        self._end_points = []
        self._is_connected = False
        self._discoverer_list = []
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _end_points = []
    _is_connected = None
    _discoverer_list = []
    _state = None
    _id = None

    @property
    def end_points(self):
        return self._end_points

    @end_points.setter
    def end_points(self, value):
        self._end_points = value

    @property
    def is_connected(self):
        return self._is_connected

    @is_connected.setter
    def is_connected(self, value):
        self._is_connected = value

    @property
    def discoverer_list(self):
        return self._discoverer_list

    @discoverer_list.setter
    def discoverer_list(self, value):
        self._discoverer_list = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['endPoints'] = list( self._end_points )
        pyson_object['isConnected'] = self._is_connected
        pyson_object['discovererList'] = list( self._discoverer_list )
        pyson_object['state'] = self._state
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'endPoints' in pyson_object:
            self._end_points = list(pyson_object['endPoints'])

        if 'isConnected' in pyson_object:
            self._is_connected = pyson_object['isConnected']

        if 'discovererList' in pyson_object:
            self._discoverer_list = list(pyson_object['discovererList'])

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.RestBroker.Models



class RestTransaction():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.RestBroker.Models.RestTransaction'
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _id = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types



class TypeKey():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.TypeKey'
        self._full_key = ""
        self._category_key = ""
        self._event_type_key = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _full_key = None
    _category_key = None
    _event_type_key = None

    @property
    def full_key(self):
        return self._full_key

    @full_key.setter
    def full_key(self, value):
        self._full_key = value

    @property
    def category_key(self):
        return self._category_key

    @category_key.setter
    def category_key(self, value):
        self._category_key = value

    @property
    def event_type_key(self):
        return self._event_type_key

    @event_type_key.setter
    def event_type_key(self, value):
        self._event_type_key = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['fullKey'] = self._full_key
        pyson_object['categoryKey'] = self._category_key
        pyson_object['eventTypeKey'] = self._event_type_key
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'fullKey' in pyson_object:
            self._full_key = pyson_object['fullKey']

        if 'categoryKey' in pyson_object:
            self._category_key = pyson_object['categoryKey']

        if 'eventTypeKey' in pyson_object:
            self._event_type_key = pyson_object['eventTypeKey']

        return pyson_object
# Odata Namespace Sel.Sel5056.TopologyManager


class State():

    @staticmethod
    def none():
        return "None"

    @staticmethod
    def adopted():
        return "Adopted"

    @staticmethod
    def unadopted():
        return "Unadopted"

    @staticmethod
    def disconnected():
        return "Disconnected"

    @staticmethod
    def established():
        return "Established"

    @staticmethod
    def configured():
        return "Configured"


class HostNode(OperationalNode):

    def __init__(self):
        super(HostNode, self).__init__()
        self._odata_type = '#Sel.Sel5056.TopologyManager.HostNode'
        self._ip_address = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _ip_address = None

    @property
    def ip_address(self):
        return self._ip_address

    @ip_address.setter
    def ip_address(self, value):
        self._ip_address = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(HostNode, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['ipAddress'] = self._ip_address
        return pyson_object

    def from_pyson(self,pyson_object):
        super(HostNode, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'ipAddress' in pyson_object:
            self._ip_address = pyson_object['ipAddress']

        return pyson_object


class HostInterfacePort(OperationalPort):

    def __init__(self):
        super(HostInterfacePort, self).__init__()
        self._odata_type = '#Sel.Sel5056.TopologyManager.HostInterfacePort'
        self._mac = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _mac = None

    @property
    def mac(self):
        return self._mac

    @mac.setter
    def mac(self, value):
        self._mac = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(HostInterfacePort, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['mac'] = self._mac
        return pyson_object

    def from_pyson(self,pyson_object):
        super(HostInterfacePort, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'mac' in pyson_object:
            self._mac = pyson_object['mac']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types.EventBus.Enums


class DurationType():

    @staticmethod
    def momentary():
        return "Momentary"

    @staticmethod
    def persistent():
        return "Persistent"

class SeverityLevel():

    @staticmethod
    def emergency():
        return "Emergency"

    @staticmethod
    def alert():
        return "Alert"

    @staticmethod
    def critical():
        return "Critical"

    @staticmethod
    def error():
        return "Error"

    @staticmethod
    def warning():
        return "Warning"

    @staticmethod
    def notice():
        return "Notice"

    @staticmethod
    def informational():
        return "Informational"

    @staticmethod
    def debug():
        return "Debug"

class BehaviorType():

    @staticmethod
    def alarm_request():
        return "AlarmRequest"

    @staticmethod
    def local_log_data():
        return "LocalLogData"

    @staticmethod
    def syslog_data():
        return "SyslogData"

    @staticmethod
    def web_data():
        return "WebData"

class EventState():

    @staticmethod
    def cleared():
        return "Cleared"

    @staticmethod
    def raised():
        return "Raised"
# Odata Namespace Sel.Sel5056.OpenFlowPlugin.Enums


class OfpActionType():

    @staticmethod
    def output():
        return "Output"

    @staticmethod
    def copy_ttl_out():
        return "CopyTtlOut"

    @staticmethod
    def copy_ttl_in():
        return "CopyTtlIn"

    @staticmethod
    def set_mpls_ttl():
        return "SetMplsTtl"

    @staticmethod
    def dec_mpls_ttl():
        return "DecMplsTtl"

    @staticmethod
    def push_vlan():
        return "PushVlan"

    @staticmethod
    def pop_vlan():
        return "PopVlan"

    @staticmethod
    def push_mpls():
        return "PushMpls"

    @staticmethod
    def pop_mpls():
        return "PopMpls"

    @staticmethod
    def set_queue():
        return "SetQueue"

    @staticmethod
    def group():
        return "Group"

    @staticmethod
    def set_nw_ttl():
        return "SetNwTtl"

    @staticmethod
    def dec_nw_ttl():
        return "DecNwTtl"

    @staticmethod
    def set_field():
        return "SetField"

    @staticmethod
    def push_pbb():
        return "PushPbb"

    @staticmethod
    def pop_pbb():
        return "PopPbb"

    @staticmethod
    def experimenter():
        return "Experimenter"

class OfpInstructionType():

    @staticmethod
    def goto_table():
        return "GotoTable"

    @staticmethod
    def write_metadata():
        return "WriteMetadata"

    @staticmethod
    def write_actions():
        return "WriteActions"

    @staticmethod
    def apply_actions():
        return "ApplyActions"

    @staticmethod
    def clear_actions():
        return "ClearActions"

    @staticmethod
    def meter():
        return "Meter"

    @staticmethod
    def experimenter():
        return "Experimenter"

class OfpPortStatus():

    @staticmethod
    def link_up():
        return "LinkUp"

    @staticmethod
    def link_down():
        return "LinkDown"

    @staticmethod
    def blocked():
        return "Blocked"

    @staticmethod
    def live():
        return "Live"

class OfpGroupType():

    @staticmethod
    def all():
        return "All"

    @staticmethod
    def select():
        return "Select"

    @staticmethod
    def indirect():
        return "Indirect"

    @staticmethod
    def fast_failover():
        return "FastFailover"
# Odata Namespace Sel.Sel5056.TopologyManager.Enums


class OfpPortStatus():

    @staticmethod
    def link_up():
        return "LinkUp"

    @staticmethod
    def link_down():
        return "LinkDown"

    @staticmethod
    def blocked():
        return "Blocked"

    @staticmethod
    def live():
        return "Live"
# Odata Namespace Sel


#
#Begin IOC Container Definition (Dependency Resolvers)
#
class _ResolveOdataType:

    @staticmethod
    def getNewObject(odata_type):
        result = None
        if odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventType":
            result = EventType()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventCategory":
            result = EventCategory()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.ClearedEventType":
            result = ClearedEventType()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.Behavior":
            result = Behavior()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.Event":
            result = Event()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action":
            result = Action()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GroupAction":
            result = GroupAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.OutputAction":
            result = OutputAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PushVlanAction":
            result = PushVlanAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PopVlanAction":
            result = PopVlanAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Match":
            result = Match()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Instruction":
            result = Instruction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Port":
            result = Port()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.ApplyActions":
            result = ApplyActions()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GoToTable":
            result = GoToTable()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.WriteActions":
            result = WriteActions()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowStat":
            result = FlowStat()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.TableStat":
            result = TableStat()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortStat":
            result = PortStat()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowStats":
            result = FlowStats()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GroupDesc":
            result = GroupDesc()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortDesc":
            result = PortDesc()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.DeviceCapability":
            result = DeviceCapability()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.TableStats":
            result = TableStats()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PortStats":
            result = PortStats()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Group":
            result = Group()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Bucket":
            result = Bucket()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Nodes.OperationalNode":
            result = OperationalNode()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Nodes.OpenFlowNode":
            result = OpenFlowNode()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Ports.OperationalPort":
            result = OperationalPort()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Ports.EthernetPort":
            result = EthernetPort()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Ports.OpenFlowPort":
            result = OpenFlowPort()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Links.OperationalLink":
            result = OperationalLink()
        elif odata_type == "#Sel.Sel5056.Common.RestBroker.Models.RestTransaction":
            result = RestTransaction()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.TypeKey":
            result = TypeKey()
        elif odata_type == "#Sel.Sel5056.TopologyManager.HostNode":
            result = HostNode()
        elif odata_type == "#Sel.Sel5056.TopologyManager.HostInterfacePort":
            result = HostInterfacePort()
        return result



