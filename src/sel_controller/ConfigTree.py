# Copyright (c) 2015 Schweitzer Engineering Laboratories, Inc.
# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Runtime Version:4.0.30319.42000
#     Output Created 11/4/2015 11:15:41 AM
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------
import json
import datetime


class BaseHttpAccess:
    entity_base_name = ""
    entity_odata_type = ""
    _session = None
    api_tree_path = 'default/config/'

    def __init__(self, session):
        self._session = session

    def read_single(self, item_id):
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        response = self._session.get_data(entity_path)
        pyson_response = json.loads(response)
        object_type = pyson_response['@odata.type'] if '@odata.type' in pyson_response else self.entity_odata_type
        result = _ResolveOdataType.getNewObject(object_type)
        result.from_pyson(pyson_response)
        return result

    def read_collection(self):
        collection_path = self.api_tree_path + self.entity_base_name 
        response = self._session.get_data(collection_path)
        pyson_response = json.loads(response)
        result = []
        raw_json_list = pyson_response['value']
        for pyson_object in raw_json_list:
            object_type = pyson_object['@odata.type'] if '@odata.type' in pyson_object else self.entity_odata_type
            new_object = _ResolveOdataType.getNewObject(object_type)
            new_object.from_pyson(pyson_object)
            result.append(new_object)
        return result

    def create_single(self, item):
        json_string = item.to_json()
        collection_path = self.api_tree_path + self.entity_base_name
        response = self._session.post_data(collection_path, json_string)
        pyson_response = json.loads(response)
        object_type = pyson_response['@odata.type'] if '@odata.type' in pyson_response else self.entity_odata_type
        result = _ResolveOdataType.getNewObject(object_type)
        result.from_pyson(pyson_response)
        return result

    def update_single(self, item, item_id):
        item_json = item.to_json()
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        response = self._session.put_json_data(entity_path, item_json)
        return response

    def patch_single(self, item, item_id, update_key_list):
        item_pyson = item.to_pyson()
        patch = {}
        for key in update_key_list:
            patch[key] = item_pyson[key]
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        json_string = json.dumps(patch, sort_keys=True, indent=4, separators=(',', ': '))
        response = self._session.patch_json_data(entity_path, json_string)
        return response

    def delete_single(self, item_id):
        entity_path = self.api_tree_path + self.entity_base_name + "('" + item_id + "')"
        response = self._session.delete_json_data(entity_path)
        return response

#
# Containers and Entity Sets
#


class nodesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(nodesHttpAccess, self).__init__(session)
        self.entity_base_name = "nodes"
        self.entity_odata_type = "#Sel.Sel5056.TopologyManager.Nodes.ConfigNode"



class portsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(portsHttpAccess, self).__init__(session)
        self.entity_base_name = "ports"
        self.entity_odata_type = "#Sel.Sel5056.TopologyManager.Ports.ConfigPort"



class linksHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(linksHttpAccess, self).__init__(session)
        self.entity_base_name = "links"
        self.entity_odata_type = "#Sel.Sel5056.TopologyManager.Links.ConfigLink"



class externalCertificateInfoHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(externalCertificateInfoHttpAccess, self).__init__(session)
        self.entity_base_name = "externalCertificateInfo"
        self.entity_odata_type = "#Sel.Sel5056.Common.TrustAuthority.DataTreeObjects.ExternalCertificateInfo"



class eventTypesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(eventTypesHttpAccess, self).__init__(session)
        self.entity_base_name = "eventTypes"
        self.entity_odata_type = "#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventType"



class eventCategoriesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(eventCategoriesHttpAccess, self).__init__(session)
        self.entity_base_name = "eventCategories"
        self.entity_odata_type = "#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventCategory"



class flowsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(flowsHttpAccess, self).__init__(session)
        self.entity_base_name = "flows"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Flow"



class groupsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(groupsHttpAccess, self).__init__(session)
        self.entity_base_name = "groups"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Group"



class flowSetHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(flowSetHttpAccess, self).__init__(session)
        self.entity_base_name = "flowSet"
        self.entity_odata_type = "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowSet"



class transactionsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(transactionsHttpAccess, self).__init__(session)
        self.entity_base_name = "transactions"
        self.entity_odata_type = "#Sel.Sel5056.Common.RestBroker.Models.RestTransaction"


#
#Begin Object Set Definition
#
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types



class TypeKey():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.TypeKey'
        self._full_key = ""
        self._category_key = ""
        self._event_type_key = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _full_key = None
    _category_key = None
    _event_type_key = None

    @property
    def full_key(self):
        return self._full_key

    @full_key.setter
    def full_key(self, value):
        self._full_key = value

    @property
    def category_key(self):
        return self._category_key

    @category_key.setter
    def category_key(self, value):
        self._category_key = value

    @property
    def event_type_key(self):
        return self._event_type_key

    @event_type_key.setter
    def event_type_key(self, value):
        self._event_type_key = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['fullKey'] = self._full_key
        pyson_object['categoryKey'] = self._category_key
        pyson_object['eventTypeKey'] = self._event_type_key
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'fullKey' in pyson_object:
            self._full_key = pyson_object['fullKey']

        if 'categoryKey' in pyson_object:
            self._category_key = pyson_object['categoryKey']

        if 'eventTypeKey' in pyson_object:
            self._event_type_key = pyson_object['eventTypeKey']

        return pyson_object
# Odata Namespace Sel.Sel5056.OpenFlowPlugin.DataTreeObjects



class Bucket():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Bucket'
        self._id = ""
        self._watch_port = 0
        self._watch_group = 0
        self._actions = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _id = None
    _watch_port = None
    _watch_group = None
    _actions = []

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def watch_port(self):
        return self._watch_port

    @watch_port.setter
    def watch_port(self, value):
        self._watch_port = value

    @property
    def watch_group(self):
        return self._watch_group

    @watch_group.setter
    def watch_group(self, value):
        self._watch_group = value

    @property
    def actions(self):
        return self._actions

    @actions.setter
    def actions(self, value):
        self._actions = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['id'] = self._id
        pyson_object['watchPort'] = self._watch_port
        pyson_object['watchGroup'] = self._watch_group
        #Complex Copy of actions
        actions_result = []
        for item_from_actions in self._actions:
            actions_result.append(item_from_actions.to_pyson())
        pyson_object['actions'] = actions_result
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        if 'watchPort' in pyson_object:
            self._watch_port = pyson_object['watchPort']

        if 'watchGroup' in pyson_object:
            self._watch_group = pyson_object['watchGroup']

        if 'actions' in pyson_object:
            self._actions = []
            actions_json_list = pyson_object['actions']
            for actions_json_element in actions_json_list:
                actions_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action'
                if '@odata.type' in actions_json_element:
                    actions_odata_type = actions_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(actions_odata_type)
                new_element.from_pyson(actions_json_element)
                self._actions.append(new_element)
        return pyson_object


class Action():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action'
        self._set_order = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _action_type = None
    _set_order = None

    @property
    def action_type(self):
        return self._action_type

    @action_type.setter
    def action_type(self, value):
        self._action_type = value

    @property
    def set_order(self):
        return self._set_order

    @set_order.setter
    def set_order(self, value):
        self._set_order = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['actionType'] = self._action_type
        pyson_object['setOrder'] = self._set_order
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'actionType' in pyson_object:
            self._action_type = pyson_object['actionType']

        if 'setOrder' in pyson_object:
            self._set_order = pyson_object['setOrder']

        return pyson_object


class GroupAction(Action):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GroupAction'
        self._group_id = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _group_id = None

    @property
    def group_id(self):
        return self._group_id

    @group_id.setter
    def group_id(self, value):
        self._group_id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(GroupAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['groupId'] = self._group_id
        return pyson_object

    def from_pyson(self,pyson_object):
        super(GroupAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'groupId' in pyson_object:
            self._group_id = pyson_object['groupId']

        return pyson_object


class OutputAction(Action):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.OutputAction'
        self._out_port = 0
        self._max_length = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _out_port = None
    _max_length = None

    @property
    def out_port(self):
        return self._out_port

    @out_port.setter
    def out_port(self, value):
        self._out_port = value

    @property
    def max_length(self):
        return self._max_length

    @max_length.setter
    def max_length(self, value):
        self._max_length = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(OutputAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['outPort'] = self._out_port
        pyson_object['maxLength'] = self._max_length
        return pyson_object

    def from_pyson(self,pyson_object):
        super(OutputAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'outPort' in pyson_object:
            self._out_port = pyson_object['outPort']

        if 'maxLength' in pyson_object:
            self._max_length = pyson_object['maxLength']

        return pyson_object


class PushVlanAction(Action):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PushVlanAction'
        self._ether_type = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _ether_type = None

    @property
    def ether_type(self):
        return self._ether_type

    @ether_type.setter
    def ether_type(self, value):
        self._ether_type = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(PushVlanAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['etherType'] = self._ether_type
        return pyson_object

    def from_pyson(self,pyson_object):
        super(PushVlanAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'etherType' in pyson_object:
            self._ether_type = pyson_object['etherType']

        return pyson_object


class PopVlanAction(Action):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PopVlanAction'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string


    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(PopVlanAction, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        super(PopVlanAction, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object


class Match():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Match'
        self._in_port = None
        self._eth_dst = None
        self._eth_src = None
        self._ipv4_dst = None
        self._ipv4_src = None
        self._eth_type = None
        self._tcp_src = None
        self._tcp_dst = None
        self._udp_src = None
        self._udp_dst = None
        self._vlan_vid = None
        self._vlan_pcp = None
        self._ip_proto = None

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _in_port = None
    _eth_dst = None
    _eth_src = None
    _ipv4_dst = None
    _ipv4_src = None
    _eth_type = None
    _tcp_src = None
    _tcp_dst = None
    _udp_src = None
    _udp_dst = None
    _vlan_vid = None
    _vlan_pcp = None
    _ip_proto = None

    @property
    def in_port(self):
        return self._in_port

    @in_port.setter
    def in_port(self, value):
        self._in_port = value

    @property
    def eth_dst(self):
        return self._eth_dst

    @eth_dst.setter
    def eth_dst(self, value):
        self._eth_dst = value

    @property
    def eth_src(self):
        return self._eth_src

    @eth_src.setter
    def eth_src(self, value):
        self._eth_src = value

    @property
    def ipv4_dst(self):
        return self._ipv4_dst

    @ipv4_dst.setter
    def ipv4_dst(self, value):
        self._ipv4_dst = value

    @property
    def ipv4_src(self):
        return self._ipv4_src

    @ipv4_src.setter
    def ipv4_src(self, value):
        self._ipv4_src = value

    @property
    def eth_type(self):
        return self._eth_type

    @eth_type.setter
    def eth_type(self, value):
        self._eth_type = value

    @property
    def tcp_src(self):
        return self._tcp_src

    @tcp_src.setter
    def tcp_src(self, value):
        self._tcp_src = value

    @property
    def tcp_dst(self):
        return self._tcp_dst

    @tcp_dst.setter
    def tcp_dst(self, value):
        self._tcp_dst = value

    @property
    def udp_src(self):
        return self._udp_src

    @udp_src.setter
    def udp_src(self, value):
        self._udp_src = value

    @property
    def udp_dst(self):
        return self._udp_dst

    @udp_dst.setter
    def udp_dst(self, value):
        self._udp_dst = value

    @property
    def vlan_vid(self):
        return self._vlan_vid

    @vlan_vid.setter
    def vlan_vid(self, value):
        self._vlan_vid = value

    @property
    def vlan_pcp(self):
        return self._vlan_pcp

    @vlan_pcp.setter
    def vlan_pcp(self, value):
        self._vlan_pcp = value

    @property
    def ip_proto(self):
        return self._ip_proto

    @ip_proto.setter
    def ip_proto(self, value):
        self._ip_proto = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['inPort'] = self._in_port
        pyson_object['ethDst'] = self._eth_dst
        pyson_object['ethSrc'] = self._eth_src
        pyson_object['ipv4Dst'] = self._ipv4_dst
        pyson_object['ipv4Src'] = self._ipv4_src
        pyson_object['ethType'] = self._eth_type
        pyson_object['tcpSrc'] = self._tcp_src
        pyson_object['tcpDst'] = self._tcp_dst
        pyson_object['udpSrc'] = self._udp_src
        pyson_object['udpDst'] = self._udp_dst
        pyson_object['vlanVid'] = self._vlan_vid
        pyson_object['vlanPcp'] = self._vlan_pcp
        pyson_object['ipProto'] = self._ip_proto
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'inPort' in pyson_object:
            self._in_port = pyson_object['inPort']

        if 'ethDst' in pyson_object:
            self._eth_dst = pyson_object['ethDst']

        if 'ethSrc' in pyson_object:
            self._eth_src = pyson_object['ethSrc']

        if 'ipv4Dst' in pyson_object:
            self._ipv4_dst = pyson_object['ipv4Dst']

        if 'ipv4Src' in pyson_object:
            self._ipv4_src = pyson_object['ipv4Src']

        if 'ethType' in pyson_object:
            self._eth_type = pyson_object['ethType']

        if 'tcpSrc' in pyson_object:
            self._tcp_src = pyson_object['tcpSrc']

        if 'tcpDst' in pyson_object:
            self._tcp_dst = pyson_object['tcpDst']

        if 'udpSrc' in pyson_object:
            self._udp_src = pyson_object['udpSrc']

        if 'udpDst' in pyson_object:
            self._udp_dst = pyson_object['udpDst']

        if 'vlanVid' in pyson_object:
            self._vlan_vid = pyson_object['vlanVid']

        if 'vlanPcp' in pyson_object:
            self._vlan_pcp = pyson_object['vlanPcp']

        if 'ipProto' in pyson_object:
            self._ip_proto = pyson_object['ipProto']

        return pyson_object


class Instruction():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Instruction'
        self._actions = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _instruction_type = None
    _actions = []

    @property
    def instruction_type(self):
        return self._instruction_type

    @instruction_type.setter
    def instruction_type(self, value):
        self._instruction_type = value

    @property
    def actions(self):
        return self._actions

    @actions.setter
    def actions(self, value):
        self._actions = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['instructionType'] = self._instruction_type
        #Complex Copy of actions
        actions_result = []
        for item_from_actions in self._actions:
            actions_result.append(item_from_actions.to_pyson())
        pyson_object['actions'] = actions_result
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'instructionType' in pyson_object:
            self._instruction_type = pyson_object['instructionType']

        if 'actions' in pyson_object:
            self._actions = []
            actions_json_list = pyson_object['actions']
            for actions_json_element in actions_json_list:
                actions_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action'
                if '@odata.type' in actions_json_element:
                    actions_odata_type = actions_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(actions_odata_type)
                new_element.from_pyson(actions_json_element)
                self._actions.append(new_element)
        return pyson_object


class ApplyActions(Instruction):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.ApplyActions'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string


    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(ApplyActions, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        super(ApplyActions, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object


class GoToTable(Instruction):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GoToTable'
        self._table_id = 0

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _table_id = None

    @property
    def table_id(self):
        return self._table_id

    @table_id.setter
    def table_id(self, value):
        self._table_id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(GoToTable, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['tableId'] = self._table_id
        return pyson_object

    def from_pyson(self,pyson_object):
        super(GoToTable, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'tableId' in pyson_object:
            self._table_id = pyson_object['tableId']

        return pyson_object


class WriteActions(Instruction):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.WriteActions'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string


    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(WriteActions, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        super(WriteActions, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object


class Flow():

    def __init__(self):
	
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Flow'
        self._node = ""
        self._cookie = 0
        self._table_id = 0
        self._buffer_id = 0
        self._out_group = 0
        self._out_port = 0
        self._priority = 0
        self._match = Match()
        self._instructions = []
        self._enabled = False
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _node = None
    _cookie = None
    _table_id = None
    _buffer_id = None
    _out_group = None
    _out_port = None
    _priority = None
    _match = None
    _instructions = []
    _enabled = None
    _id = None

    @property
    def node(self):
        return self._node

    @node.setter
    def node(self, value):
        self._node = value

    @property
    def cookie(self):
        return self._cookie

    @cookie.setter
    def cookie(self, value):
        self._cookie = value

    @property
    def table_id(self):
        return self._table_id

    @table_id.setter
    def table_id(self, value):
        self._table_id = value

    @property
    def buffer_id(self):
        return self._buffer_id

    @buffer_id.setter
    def buffer_id(self, value):
        self._buffer_id = value

    @property
    def out_group(self):
        return self._out_group

    @out_group.setter
    def out_group(self, value):
        self._out_group = value

    @property
    def out_port(self):
        return self._out_port

    @out_port.setter
    def out_port(self, value):
        self._out_port = value

    @property
    def priority(self):
        return self._priority

    @priority.setter
    def priority(self, value):
        self._priority = value

    @property
    def match(self):
        return self._match

    @match.setter
    def match(self, value):
        self._match = value

    @property
    def instructions(self):
        return self._instructions

    @instructions.setter
    def instructions(self, value):
        self._instructions = value

    @property
    def enabled(self):
        return self._enabled

    @enabled.setter
    def enabled(self, value):
        self._enabled = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['node'] = self._node
        pyson_object['cookie'] = self._cookie
        pyson_object['tableId'] = self._table_id
        pyson_object['bufferId'] = self._buffer_id
        pyson_object['outGroup'] = self._out_group
        pyson_object['outPort'] = self._out_port
        pyson_object['priority'] = self._priority
        pyson_object['match'] = self._match.to_pyson()
        #Complex Copy of instructions
        instructions_result = []
        for item_from_instructions in self._instructions:
            instructions_result.append(item_from_instructions.to_pyson())
        pyson_object['instructions'] = instructions_result
        pyson_object['enabled'] = self._enabled
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'node' in pyson_object:
            self._node = pyson_object['node']

        if 'cookie' in pyson_object:
            self._cookie = pyson_object['cookie']

        if 'tableId' in pyson_object:
            self._table_id = pyson_object['tableId']

        if 'bufferId' in pyson_object:
            self._buffer_id = pyson_object['bufferId']

        if 'outGroup' in pyson_object:
            self._out_group = pyson_object['outGroup']

        if 'outPort' in pyson_object:
            self._out_port = pyson_object['outPort']

        if 'priority' in pyson_object:
            self._priority = pyson_object['priority']

        if 'match' in pyson_object:
            self._match = Match()
            self._match.from_pyson(pyson_object['match'])

        if 'instructions' in pyson_object:
            self._instructions = []
            instructions_json_list = pyson_object['instructions']
            for instructions_json_element in instructions_json_list:
                instructions_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Instruction'
                if '@odata.type' in instructions_json_element:
                    instructions_odata_type = instructions_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(instructions_odata_type)
                new_element.from_pyson(instructions_json_element)
                self._instructions.append(new_element)
        if 'enabled' in pyson_object:
            self._enabled = pyson_object['enabled']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class Group():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Group'
        self._node = ""
        self._buckets = []
        self._group_id = 0
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _node = None
    _buckets = []
    _group_type = None
    _group_id = None
    _id = None

    @property
    def node(self):
        return self._node

    @node.setter
    def node(self, value):
        self._node = value

    @property
    def buckets(self):
        return self._buckets

    @buckets.setter
    def buckets(self, value):
        self._buckets = value

    @property
    def group_type(self):
        return self._group_type

    @group_type.setter
    def group_type(self, value):
        self._group_type = value

    @property
    def group_id(self):
        return self._group_id

    @group_id.setter
    def group_id(self, value):
        self._group_id = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['node'] = self._node
        #Complex Copy of buckets
        buckets_result = []
        for item_from_buckets in self._buckets:
            buckets_result.append(item_from_buckets.to_pyson())
        pyson_object['buckets'] = buckets_result
        pyson_object['groupType'] = self._group_type
        pyson_object['groupId'] = self._group_id
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'node' in pyson_object:
            self._node = pyson_object['node']

        if 'buckets' in pyson_object:
            self._buckets = []
            buckets_json_list = pyson_object['buckets']
            for buckets_json_element in buckets_json_list:
                buckets_odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Bucket'
                if '@odata.type' in buckets_json_element:
                    buckets_odata_type = buckets_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(buckets_odata_type)
                new_element.from_pyson(buckets_json_element)
                self._buckets.append(new_element)
        if 'groupType' in pyson_object:
            self._group_type = pyson_object['groupType']

        if 'groupId' in pyson_object:
            self._group_id = pyson_object['groupId']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class FlowSet():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowSet'
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _id = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object
# Odata Namespace Sel.Sel5056.TopologyManager.Nodes



class ConfigNode():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.TopologyManager.Nodes.ConfigNode'
        self._display_name = ""
        self._id = ""
        self._linked_key = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _display_name = None
    _state = None
    _id = None
    _linked_key = None

    @property
    def display_name(self):
        return self._display_name

    @display_name.setter
    def display_name(self, value):
        self._display_name = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def linked_key(self):
        return self._linked_key

    @linked_key.setter
    def linked_key(self, value):
        self._linked_key = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['displayName'] = self._display_name
        pyson_object['state'] = self._state
        pyson_object['id'] = self._id
        pyson_object['linkedKey'] = self._linked_key
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'displayName' in pyson_object:
            self._display_name = pyson_object['displayName']

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        if 'linkedKey' in pyson_object:
            self._linked_key = pyson_object['linkedKey']

        return pyson_object
# Odata Namespace Sel.Sel5056.TopologyManager.Ports



class ConfigPort():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.TopologyManager.Ports.ConfigPort'
        self._display_name = ""
        self._id = ""
        self._linked_key = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _display_name = None
    _state = None
    _id = None
    _linked_key = None

    @property
    def display_name(self):
        return self._display_name

    @display_name.setter
    def display_name(self, value):
        self._display_name = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def linked_key(self):
        return self._linked_key

    @linked_key.setter
    def linked_key(self, value):
        self._linked_key = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['displayName'] = self._display_name
        pyson_object['state'] = self._state
        pyson_object['id'] = self._id
        pyson_object['linkedKey'] = self._linked_key
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'displayName' in pyson_object:
            self._display_name = pyson_object['displayName']

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        if 'linkedKey' in pyson_object:
            self._linked_key = pyson_object['linkedKey']

        return pyson_object
# Odata Namespace Sel.Sel5056.TopologyManager.Links



class ConfigLink():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.TopologyManager.Links.ConfigLink'
        self._display_name = ""
        self._id = ""
        self._linked_key = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _display_name = None
    _state = None
    _id = None
    _linked_key = None

    @property
    def display_name(self):
        return self._display_name

    @display_name.setter
    def display_name(self, value):
        self._display_name = value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def linked_key(self):
        return self._linked_key

    @linked_key.setter
    def linked_key(self, value):
        self._linked_key = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['displayName'] = self._display_name
        pyson_object['state'] = self._state
        pyson_object['id'] = self._id
        pyson_object['linkedKey'] = self._linked_key
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'displayName' in pyson_object:
            self._display_name = pyson_object['displayName']

        if 'state' in pyson_object:
            self._state = pyson_object['state']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        if 'linkedKey' in pyson_object:
            self._linked_key = pyson_object['linkedKey']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.TrustAuthority.DataTreeObjects



class ExternalCertificateInfo():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.TrustAuthority.DataTreeObjects.ExternalCertificateInfo'
        self._name = ""
        self._base64_certificate = ""
        self._thumb_print = ""
        self._certificate_password = ""
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _name = None
    _base64_certificate = None
    _thumb_print = None
    _certificate_password = None
    _purpose = None
    _id = None

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def base64_certificate(self):
        return self._base64_certificate

    @base64_certificate.setter
    def base64_certificate(self, value):
        self._base64_certificate = value

    @property
    def thumb_print(self):
        return self._thumb_print

    @thumb_print.setter
    def thumb_print(self, value):
        self._thumb_print = value

    @property
    def certificate_password(self):
        return self._certificate_password

    @certificate_password.setter
    def certificate_password(self, value):
        self._certificate_password = value

    @property
    def purpose(self):
        return self._purpose

    @purpose.setter
    def purpose(self, value):
        self._purpose = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['name'] = self._name
        pyson_object['base64Certificate'] = self._base64_certificate
        pyson_object['thumbPrint'] = self._thumb_print
        pyson_object['certificatePassword'] = self._certificate_password
        pyson_object['purpose'] = self._purpose
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'name' in pyson_object:
            self._name = pyson_object['name']

        if 'base64Certificate' in pyson_object:
            self._base64_certificate = pyson_object['base64Certificate']

        if 'thumbPrint' in pyson_object:
            self._thumb_print = pyson_object['thumbPrint']

        if 'certificatePassword' in pyson_object:
            self._certificate_password = pyson_object['certificatePassword']

        if 'purpose' in pyson_object:
            self._purpose = pyson_object['purpose']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types.EventBus



class Behavior():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.Behavior'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _behavior_type = None
    _severity = None

    @property
    def behavior_type(self):
        return self._behavior_type

    @behavior_type.setter
    def behavior_type(self, value):
        self._behavior_type = value

    @property
    def severity(self):
        return self._severity

    @severity.setter
    def severity(self, value):
        self._severity = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['behaviorType'] = self._behavior_type
        pyson_object['severity'] = self._severity
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'behaviorType' in pyson_object:
            self._behavior_type = pyson_object['behaviorType']

        if 'severity' in pyson_object:
            self._severity = pyson_object['severity']

        return pyson_object


class EventType():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventType'
        self._type_key = TypeKey()
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _type_key = None
    _duration_setting = None
    _severity = None
    _id = None

    @property
    def type_key(self):
        return self._type_key

    @type_key.setter
    def type_key(self, value):
        self._type_key = value

    @property
    def duration_setting(self):
        return self._duration_setting

    @duration_setting.setter
    def duration_setting(self, value):
        self._duration_setting = value

    @property
    def severity(self):
        return self._severity

    @severity.setter
    def severity(self, value):
        self._severity = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['typeKey'] = self._type_key.to_pyson()
        pyson_object['durationSetting'] = self._duration_setting
        pyson_object['severity'] = self._severity
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'typeKey' in pyson_object:
            self._type_key = pyson_object['typeKey']

        if 'durationSetting' in pyson_object:
            self._duration_setting = pyson_object['durationSetting']

        if 'severity' in pyson_object:
            self._severity = pyson_object['severity']

        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class EventCategory():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventCategory'
        self._key = ""
        self._behaviors = []
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _key = None
    _behaviors = []
    _id = None

    @property
    def key(self):
        return self._key

    @key.setter
    def key(self, value):
        self._key = value

    @property
    def behaviors(self):
        return self._behaviors

    @behaviors.setter
    def behaviors(self, value):
        self._behaviors = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['key'] = self._key
        #Complex Copy of behaviors
        behaviors_result = []
        for item_from_behaviors in self._behaviors:
            behaviors_result.append(item_from_behaviors.to_pyson())
        pyson_object['behaviors'] = behaviors_result
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'key' in pyson_object:
            self._key = pyson_object['key']

        if 'behaviors' in pyson_object:
            self._behaviors = []
            behaviors_json_list = pyson_object['behaviors']
            for behaviors_json_element in behaviors_json_list:
                behaviors_odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.Behavior'
                if '@odata.type' in behaviors_json_element:
                    behaviors_odata_type = behaviors_json_element['@odata.type']
                new_element = _ResolveOdataType.getNewObject(behaviors_odata_type)
                new_element.from_pyson(behaviors_json_element)
                self._behaviors.append(new_element)
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object


class ClearedEventType(EventType):

    def __init__(self):
        super().__init__()
        self._odata_type = '#Sel.Sel5056.Common.DataBroker.Types.EventBus.ClearedEventType'
        self._linked_type_key = TypeKey()

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _linked_type_key = None

    @property
    def linked_type_key(self):
        return self._linked_type_key

    @linked_type_key.setter
    def linked_type_key(self, value):
        self._linked_type_key = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        super(ClearedEventType, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['linkedTypeKey'] = self._linked_type_key.to_pyson()
        return pyson_object

    def from_pyson(self,pyson_object):
        super(ClearedEventType, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'linkedTypeKey' in pyson_object:
            self._linked_type_key = pyson_object['linkedTypeKey']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.RestBroker.Models



class RestTransaction():

    def __init__(self):
        self._odata_type = '#Sel.Sel5056.Common.RestBroker.Models.RestTransaction'
        self._id = ""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(',', ': '))
        return json_string

    _id = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object['id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if 'id' in pyson_object:
            self._id = pyson_object['id']

        return pyson_object
# Odata Namespace Sel.Sel5056.OpenFlowPlugin.Enums


class OfpActionType():

    @staticmethod
    def output():
        return "Output"

    @staticmethod
    def copy_ttl_out():
        return "CopyTtlOut"

    @staticmethod
    def copy_ttl_in():
        return "CopyTtlIn"

    @staticmethod
    def set_mpls_ttl():
        return "SetMplsTtl"

    @staticmethod
    def dec_mpls_ttl():
        return "DecMplsTtl"

    @staticmethod
    def push_vlan():
        return "PushVlan"

    @staticmethod
    def pop_vlan():
        return "PopVlan"

    @staticmethod
    def push_mpls():
        return "PushMpls"

    @staticmethod
    def pop_mpls():
        return "PopMpls"

    @staticmethod
    def set_queue():
        return "SetQueue"

    @staticmethod
    def group():
        return "Group"

    @staticmethod
    def set_nw_ttl():
        return "SetNwTtl"

    @staticmethod
    def dec_nw_ttl():
        return "DecNwTtl"

    @staticmethod
    def set_field():
        return "SetField"

    @staticmethod
    def push_pbb():
        return "PushPbb"

    @staticmethod
    def pop_pbb():
        return "PopPbb"

    @staticmethod
    def experimenter():
        return "Experimenter"

class OfpInstructionType():

    @staticmethod
    def goto_table():
        return "GotoTable"

    @staticmethod
    def write_metadata():
        return "WriteMetadata"

    @staticmethod
    def write_actions():
        return "WriteActions"

    @staticmethod
    def apply_actions():
        return "ApplyActions"

    @staticmethod
    def clear_actions():
        return "ClearActions"

    @staticmethod
    def meter():
        return "Meter"

    @staticmethod
    def experimenter():
        return "Experimenter"

class OfpGroupType():

    @staticmethod
    def all():
        return "All"

    @staticmethod
    def select():
        return "Select"

    @staticmethod
    def indirect():
        return "Indirect"

    @staticmethod
    def fast_failover():
        return "FastFailover"
# Odata Namespace Sel.Sel5056.TopologyManager


class State():

    @staticmethod
    def none():
        return "None"

    @staticmethod
    def adopted():
        return "Adopted"

    @staticmethod
    def unadopted():
        return "Unadopted"

    @staticmethod
    def disconnected():
        return "Disconnected"

    @staticmethod
    def established():
        return "Established"

    @staticmethod
    def configured():
        return "Configured"
# Odata Namespace Sel.Sel5056.Common.TrustAuthority.Enums


class CertificatePurpose():

    @staticmethod
    def web_server():
        return "WebServer"

    @staticmethod
    def internal_certificate_authority():
        return "InternalCertificateAuthority"
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types.EventBus.Enums


class DurationType():

    @staticmethod
    def momentary():
        return "Momentary"

    @staticmethod
    def persistent():
        return "Persistent"

class SeverityLevel():

    @staticmethod
    def emergency():
        return "Emergency"

    @staticmethod
    def alert():
        return "Alert"

    @staticmethod
    def critical():
        return "Critical"

    @staticmethod
    def error():
        return "Error"

    @staticmethod
    def warning():
        return "Warning"

    @staticmethod
    def notice():
        return "Notice"

    @staticmethod
    def informational():
        return "Informational"

    @staticmethod
    def debug():
        return "Debug"

class BehaviorType():

    @staticmethod
    def alarm_request():
        return "AlarmRequest"

    @staticmethod
    def local_log_data():
        return "LocalLogData"

    @staticmethod
    def syslog_data():
        return "SyslogData"

    @staticmethod
    def web_data():
        return "WebData"
# Odata Namespace Sel


#
#Begin IOC Container Definition (Dependency Resolvers)
#
class _ResolveOdataType:

    @staticmethod
    def getNewObject(odata_type):
        result = None
        if odata_type == "#Sel.Sel5056.Common.DataBroker.Types.TypeKey":
            result = TypeKey()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Bucket":
            result = Bucket()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Action":
            result = Action()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GroupAction":
            result = GroupAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.OutputAction":
            result = OutputAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PushVlanAction":
            result = PushVlanAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.PopVlanAction":
            result = PopVlanAction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Match":
            result = Match()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Instruction":
            result = Instruction()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.ApplyActions":
            result = ApplyActions()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.GoToTable":
            result = GoToTable()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.WriteActions":
            result = WriteActions()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Flow":
            result = Flow()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.Group":
            result = Group()
        elif odata_type == "#Sel.Sel5056.OpenFlowPlugin.DataTreeObjects.FlowSet":
            result = FlowSet()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Nodes.ConfigNode":
            result = ConfigNode()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Ports.ConfigPort":
            result = ConfigPort()
        elif odata_type == "#Sel.Sel5056.TopologyManager.Links.ConfigLink":
            result = ConfigLink()
        elif odata_type == "#Sel.Sel5056.Common.TrustAuthority.DataTreeObjects.ExternalCertificateInfo":
            result = ExternalCertificateInfo()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.Behavior":
            result = Behavior()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventType":
            result = EventType()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.EventCategory":
            result = EventCategory()
        elif odata_type == "#Sel.Sel5056.Common.DataBroker.Types.EventBus.ClearedEventType":
            result = ClearedEventType()
        elif odata_type == "#Sel.Sel5056.Common.RestBroker.Models.RestTransaction":
            result = RestTransaction()
        return result



