# Copyright (c) 2015 Schweitzer Engineering Laboratories, Inc.
# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Runtime Version:4.0.30319.42000
#     Output Created 11/4/2015 11:38:10 AM
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------
from __future__ import absolute_import
import json
import datetime


class BaseHttpAccess(object):
    entity_base_name = u""
    entity_odata_type = u""
    _session = None
    api_tree_path = u'default/security/'

    def __init__(self, session):
        self._session = session

    def read_single(self, item_id):
        entity_path = self.api_tree_path + self.entity_base_name + u"('" + item_id + u"')"
        response = self._session.get_data(entity_path)
        pyson_response = json.loads(response)
        object_type = pyson_response[u'@odata.type'] if u'@odata.type' in pyson_response else self.entity_odata_type
        result = _ResolveOdataType.getNewObject(object_type)
        result.from_pyson(pyson_response)
        return result

    def read_collection(self):
        collection_path = self.api_tree_path + self.entity_base_name 
        response = self._session.get_data(collection_path)
        pyson_response = json.loads(response)
        result = []
        raw_json_list = pyson_response[u'value']
        for pyson_object in raw_json_list:
            object_type = pyson_object[u'@odata.type'] if u'@odata.type' in pyson_object else self.entity_odata_type
            new_object = _ResolveOdataType.getNewObject(object_type)
            new_object.from_pyson(pyson_object)
            result.append(new_object)
        return result

    def create_single(self, item):
        json_string = item.to_json()
        collection_path = self.api_tree_path + self.entity_base_name
        response = self._session.post_data(collection_path, json_string)
        pyson_response = json.loads(response)
        object_type = pyson_response[u'@odata.type'] if u'@odata.type' in pyson_response else self.entity_odata_type
        result = _ResolveOdataType.getNewObject(object_type)
        result.from_pyson(pyson_response)
        return result

    def update_single(self, item, item_id):
        item_json = item.to_json()
        entity_path = self.api_tree_path + self.entity_base_name + u"('" + item_id + u"')"
        response = self._session.put_json_data(entity_path, item_json)
        return response

    def patch_single(self, item, item_id, update_key_list):
        item_pyson = item.to_pyson()
        patch = {}
        for key in update_key_list:
            patch[key] = item_pyson[key]
        entity_path = self.api_tree_path + self.entity_base_name + u"('" + item_id + u"')"
        json_string = json.dumps(patch, sort_keys=True, indent=4, separators=(u',', u': '))
        response = self._session.patch_json_data(entity_path, json_string)
        return response

    def delete_single(self, item_id):
        entity_path = self.api_tree_path + self.entity_base_name + u"('" + item_id + u"')"
        response = self._session.delete_json_data(entity_path)
        return response

#
# Containers and Entity Sets
#


class rolesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(rolesHttpAccess, self).__init__(session)
        self.entity_base_name = u"roles"
        self.entity_odata_type = u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.Role"



class usersHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(usersHttpAccess, self).__init__(session)
        self.entity_base_name = u"users"
        self.entity_odata_type = u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.User"



class authServicesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(authServicesHttpAccess, self).__init__(session)
        self.entity_base_name = u"authServices"
        self.entity_odata_type = u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.AuthService"



class moduleRolesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(moduleRolesHttpAccess, self).__init__(session)
        self.entity_base_name = u"moduleRoles"
        self.entity_odata_type = u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.ModuleRole"



class oauthClientsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(oauthClientsHttpAccess, self).__init__(session)
        self.entity_base_name = u"oauthClients"
        self.entity_odata_type = u"#Sel.Sel5056.Common.RestBroker.Models.OauthClient"



class authCodesHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(authCodesHttpAccess, self).__init__(session)
        self.entity_base_name = u"authCodes"
        self.entity_odata_type = u"#Sel.Sel5056.Common.RestBroker.Models.AuthCode"



class refreshTokensHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(refreshTokensHttpAccess, self).__init__(session)
        self.entity_base_name = u"refreshTokens"
        self.entity_odata_type = u"#Sel.Sel5056.Common.RestBroker.Models.RefreshTokenHandle"



class tokensHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(tokensHttpAccess, self).__init__(session)
        self.entity_base_name = u"tokens"
        self.entity_odata_type = u"#Sel.Sel5056.Common.RestBroker.Models.TokenHandle"



class transactionsHttpAccess(BaseHttpAccess):

    def __init__(self, session):
        super(transactionsHttpAccess, self).__init__(session)
        self.entity_base_name = u"transactions"
        self.entity_odata_type = u"#Sel.Sel5056.Common.RestBroker.Models.RestTransaction"


#
#Begin Object Set Definition
#
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types.SecurityManager



class Permission(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.Permission'
        self._module = u""
        self._permission_tag = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _module = None
    _permission_tag = None

    @property
    def module(self):
        return self._module

    @module.setter
    def module(self, value):
        self._module = value

    @property
    def permission_tag(self):
        return self._permission_tag

    @permission_tag.setter
    def permission_tag(self, value):
        self._permission_tag = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'module'] = self._module
        pyson_object[u'permissionTag'] = self._permission_tag
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'module' in pyson_object:
            self._module = pyson_object[u'module']

        if u'permissionTag' in pyson_object:
            self._permission_tag = pyson_object[u'permissionTag']

        return pyson_object


class Role(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.Role'
        self._role_name = u""
        self._permissions = []
        self._id = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _role_name = None
    _permissions = []
    _id = None

    @property
    def role_name(self):
        return self._role_name

    @role_name.setter
    def role_name(self, value):
        self._role_name = value

    @property
    def permissions(self):
        return self._permissions

    @permissions.setter
    def permissions(self, value):
        self._permissions = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'roleName'] = self._role_name
        #Complex Copy of permissions
        permissions_result = []
        for item_from_permissions in self._permissions:
            permissions_result.append(item_from_permissions.to_pyson())
        pyson_object[u'permissions'] = permissions_result
        pyson_object[u'id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'roleName' in pyson_object:
            self._role_name = pyson_object[u'roleName']

        if u'permissions' in pyson_object:
            self._permissions = []
            permissions_json_list = pyson_object[u'permissions']
            for permissions_json_element in permissions_json_list:
                permissions_odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.Permission'
                if u'@odata.type' in permissions_json_element:
                    permissions_odata_type = permissions_json_element[u'@odata.type']
                new_element = _ResolveOdataType.getNewObject(permissions_odata_type)
                new_element.from_pyson(permissions_json_element)
                self._permissions.append(new_element)
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        return pyson_object


class User(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.User'
        self._username = u""
        self._roles = []
        self._id = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _username = None
    _roles = []
    _id = None

    @property
    def username(self):
        return self._username

    @username.setter
    def username(self, value):
        self._username = value

    @property
    def roles(self):
        return self._roles

    @roles.setter
    def roles(self, value):
        self._roles = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'username'] = self._username
        pyson_object[u'roles'] = list( self._roles )
        pyson_object[u'id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'username' in pyson_object:
            self._username = pyson_object[u'username']

        if u'roles' in pyson_object:
            self._roles = list(pyson_object[u'roles'])

        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        return pyson_object


class AuthService(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.AuthService'
        self._id = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _id = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        return pyson_object


class ModuleRole(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.ModuleRole'
        self._module = u""
        self._permissions = []
        self._id = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _module = None
    _permissions = []
    _id = None

    @property
    def module(self):
        return self._module

    @module.setter
    def module(self, value):
        self._module = value

    @property
    def permissions(self):
        return self._permissions

    @permissions.setter
    def permissions(self, value):
        self._permissions = value

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'module'] = self._module
        #Complex Copy of permissions
        permissions_result = []
        for item_from_permissions in self._permissions:
            permissions_result.append(item_from_permissions.to_pyson())
        pyson_object[u'permissions'] = permissions_result
        pyson_object[u'id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'module' in pyson_object:
            self._module = pyson_object[u'module']

        if u'permissions' in pyson_object:
            self._permissions = []
            permissions_json_list = pyson_object[u'permissions']
            for permissions_json_element in permissions_json_list:
                permissions_odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.Permission'
                if u'@odata.type' in permissions_json_element:
                    permissions_odata_type = permissions_json_element[u'@odata.type']
                new_element = _ResolveOdataType.getNewObject(permissions_odata_type)
                new_element.from_pyson(permissions_json_element)
                self._permissions.append(new_element)
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        return pyson_object


class AuthServiceUser(User):

    def __init__(self):
        super(AuthServiceUser, self).__init__()
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.AuthServiceUser'
        self._auth_service = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _auth_service = None

    @property
    def auth_service(self):
        return self._auth_service

    @auth_service.setter
    def auth_service(self, value):
        self._auth_service = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        super(AuthServiceUser, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'authService'] = self._auth_service
        return pyson_object

    def from_pyson(self,pyson_object):
        super(AuthServiceUser, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'authService' in pyson_object:
            self._auth_service = pyson_object[u'authService']

        return pyson_object


class LocalUser(User):

    def __init__(self):
        super(LocalUser, self).__init__()
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.LocalUser'
        self._salted_hash_password = None
        self._current_salt = None
        self._clear_text_pass = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _salted_hash_password = None
    _current_salt = None
    _clear_text_pass = None

    @property
    def salted_hash_password(self):
        return self._salted_hash_password

    @salted_hash_password.setter
    def salted_hash_password(self, value):
        self._salted_hash_password = value

    @property
    def current_salt(self):
        return self._current_salt

    @current_salt.setter
    def current_salt(self, value):
        self._current_salt = value

    @property
    def clear_text_pass(self):
        return self._clear_text_pass

    @clear_text_pass.setter
    def clear_text_pass(self, value):
        self._clear_text_pass = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        super(LocalUser, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'saltedHashPassword'] = self._salted_hash_password
        pyson_object[u'currentSalt'] = self._current_salt
        pyson_object[u'clearTextPass'] = self._clear_text_pass
        return pyson_object

    def from_pyson(self,pyson_object):
        super(LocalUser, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'saltedHashPassword' in pyson_object:
            self._salted_hash_password = pyson_object[u'saltedHashPassword']

        if u'currentSalt' in pyson_object:
            self._current_salt = pyson_object[u'currentSalt']

        if u'clearTextPass' in pyson_object:
            self._clear_text_pass = pyson_object[u'clearTextPass']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.RestBroker.Models



class OauthClient(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.RestBroker.Models.OauthClient'
        self._id = u""
        self._enabled = False
        self._client_id = u""
        self._client_secrets = []
        self._client_name = u""
        self._client_uri = u""
        self._logo_uri = u""
        self._require_consent = False
        self._allow_remember_consent = False
        self._allow_client_credentials_only = False
        self._redirect_uris = []
        self._post_logout_redirect_uris = []
        self._allow_access_to_all_scopes = False
        self._allowed_scopes = []
        self._identity_token_lifetime = 0
        self._access_token_lifetime = 0
        self._authorization_code_lifetime = 0
        self._absolute_refresh_token_lifetime = 0
        self._sliding_refresh_token_lifetime = 0
        self._update_access_token_claims_on_refresh = False
        self._enable_local_login = False
        self._identity_provider_restrictions = []
        self._include_jwt_id = False
        self._claims = []
        self._always_send_client_claims = False
        self._prefix_client_claims = False
        self._allow_access_to_all_custom_grant_types = False
        self._allowed_custom_grant_types = []
        self._allowed_cors_origins = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _id = None
    _enabled = None
    _client_id = None
    _client_secrets = []
    _client_name = None
    _client_uri = None
    _logo_uri = None
    _require_consent = None
    _allow_remember_consent = None
    _flow = None
    _allow_client_credentials_only = None
    _redirect_uris = []
    _post_logout_redirect_uris = []
    _allow_access_to_all_scopes = None
    _allowed_scopes = []
    _identity_token_lifetime = None
    _access_token_lifetime = None
    _authorization_code_lifetime = None
    _absolute_refresh_token_lifetime = None
    _sliding_refresh_token_lifetime = None
    _refresh_token_usage = None
    _update_access_token_claims_on_refresh = None
    _refresh_token_expiration = None
    _access_token_type = None
    _enable_local_login = None
    _identity_provider_restrictions = []
    _include_jwt_id = None
    _claims = []
    _always_send_client_claims = None
    _prefix_client_claims = None
    _allow_access_to_all_custom_grant_types = None
    _allowed_custom_grant_types = []
    _allowed_cors_origins = []

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def enabled(self):
        return self._enabled

    @enabled.setter
    def enabled(self, value):
        self._enabled = value

    @property
    def client_id(self):
        return self._client_id

    @client_id.setter
    def client_id(self, value):
        self._client_id = value

    @property
    def client_secrets(self):
        return self._client_secrets

    @client_secrets.setter
    def client_secrets(self, value):
        self._client_secrets = value

    @property
    def client_name(self):
        return self._client_name

    @client_name.setter
    def client_name(self, value):
        self._client_name = value

    @property
    def client_uri(self):
        return self._client_uri

    @client_uri.setter
    def client_uri(self, value):
        self._client_uri = value

    @property
    def logo_uri(self):
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, value):
        self._logo_uri = value

    @property
    def require_consent(self):
        return self._require_consent

    @require_consent.setter
    def require_consent(self, value):
        self._require_consent = value

    @property
    def allow_remember_consent(self):
        return self._allow_remember_consent

    @allow_remember_consent.setter
    def allow_remember_consent(self, value):
        self._allow_remember_consent = value

    @property
    def flow(self):
        return self._flow

    @flow.setter
    def flow(self, value):
        self._flow = value

    @property
    def allow_client_credentials_only(self):
        return self._allow_client_credentials_only

    @allow_client_credentials_only.setter
    def allow_client_credentials_only(self, value):
        self._allow_client_credentials_only = value

    @property
    def redirect_uris(self):
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, value):
        self._redirect_uris = value

    @property
    def post_logout_redirect_uris(self):
        return self._post_logout_redirect_uris

    @post_logout_redirect_uris.setter
    def post_logout_redirect_uris(self, value):
        self._post_logout_redirect_uris = value

    @property
    def allow_access_to_all_scopes(self):
        return self._allow_access_to_all_scopes

    @allow_access_to_all_scopes.setter
    def allow_access_to_all_scopes(self, value):
        self._allow_access_to_all_scopes = value

    @property
    def allowed_scopes(self):
        return self._allowed_scopes

    @allowed_scopes.setter
    def allowed_scopes(self, value):
        self._allowed_scopes = value

    @property
    def identity_token_lifetime(self):
        return self._identity_token_lifetime

    @identity_token_lifetime.setter
    def identity_token_lifetime(self, value):
        self._identity_token_lifetime = value

    @property
    def access_token_lifetime(self):
        return self._access_token_lifetime

    @access_token_lifetime.setter
    def access_token_lifetime(self, value):
        self._access_token_lifetime = value

    @property
    def authorization_code_lifetime(self):
        return self._authorization_code_lifetime

    @authorization_code_lifetime.setter
    def authorization_code_lifetime(self, value):
        self._authorization_code_lifetime = value

    @property
    def absolute_refresh_token_lifetime(self):
        return self._absolute_refresh_token_lifetime

    @absolute_refresh_token_lifetime.setter
    def absolute_refresh_token_lifetime(self, value):
        self._absolute_refresh_token_lifetime = value

    @property
    def sliding_refresh_token_lifetime(self):
        return self._sliding_refresh_token_lifetime

    @sliding_refresh_token_lifetime.setter
    def sliding_refresh_token_lifetime(self, value):
        self._sliding_refresh_token_lifetime = value

    @property
    def refresh_token_usage(self):
        return self._refresh_token_usage

    @refresh_token_usage.setter
    def refresh_token_usage(self, value):
        self._refresh_token_usage = value

    @property
    def update_access_token_claims_on_refresh(self):
        return self._update_access_token_claims_on_refresh

    @update_access_token_claims_on_refresh.setter
    def update_access_token_claims_on_refresh(self, value):
        self._update_access_token_claims_on_refresh = value

    @property
    def refresh_token_expiration(self):
        return self._refresh_token_expiration

    @refresh_token_expiration.setter
    def refresh_token_expiration(self, value):
        self._refresh_token_expiration = value

    @property
    def access_token_type(self):
        return self._access_token_type

    @access_token_type.setter
    def access_token_type(self, value):
        self._access_token_type = value

    @property
    def enable_local_login(self):
        return self._enable_local_login

    @enable_local_login.setter
    def enable_local_login(self, value):
        self._enable_local_login = value

    @property
    def identity_provider_restrictions(self):
        return self._identity_provider_restrictions

    @identity_provider_restrictions.setter
    def identity_provider_restrictions(self, value):
        self._identity_provider_restrictions = value

    @property
    def include_jwt_id(self):
        return self._include_jwt_id

    @include_jwt_id.setter
    def include_jwt_id(self, value):
        self._include_jwt_id = value

    @property
    def claims(self):
        return self._claims

    @claims.setter
    def claims(self, value):
        self._claims = value

    @property
    def always_send_client_claims(self):
        return self._always_send_client_claims

    @always_send_client_claims.setter
    def always_send_client_claims(self, value):
        self._always_send_client_claims = value

    @property
    def prefix_client_claims(self):
        return self._prefix_client_claims

    @prefix_client_claims.setter
    def prefix_client_claims(self, value):
        self._prefix_client_claims = value

    @property
    def allow_access_to_all_custom_grant_types(self):
        return self._allow_access_to_all_custom_grant_types

    @allow_access_to_all_custom_grant_types.setter
    def allow_access_to_all_custom_grant_types(self, value):
        self._allow_access_to_all_custom_grant_types = value

    @property
    def allowed_custom_grant_types(self):
        return self._allowed_custom_grant_types

    @allowed_custom_grant_types.setter
    def allowed_custom_grant_types(self, value):
        self._allowed_custom_grant_types = value

    @property
    def allowed_cors_origins(self):
        return self._allowed_cors_origins

    @allowed_cors_origins.setter
    def allowed_cors_origins(self, value):
        self._allowed_cors_origins = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'id'] = self._id
        pyson_object[u'enabled'] = self._enabled
        pyson_object[u'clientId'] = self._client_id
        #Complex Copy of clientSecrets
        client_secrets_result = []
        for item_from_client_secrets in self._client_secrets:
            client_secrets_result.append(item_from_client_secrets.to_pyson())
        pyson_object[u'clientSecrets'] = client_secrets_result
        pyson_object[u'clientName'] = self._client_name
        pyson_object[u'clientUri'] = self._client_uri
        pyson_object[u'logoUri'] = self._logo_uri
        pyson_object[u'requireConsent'] = self._require_consent
        pyson_object[u'allowRememberConsent'] = self._allow_remember_consent
        pyson_object[u'flow'] = self._flow
        pyson_object[u'allowClientCredentialsOnly'] = self._allow_client_credentials_only
        pyson_object[u'redirectUris'] = list( self._redirect_uris )
        pyson_object[u'postLogoutRedirectUris'] = list( self._post_logout_redirect_uris )
        pyson_object[u'allowAccessToAllScopes'] = self._allow_access_to_all_scopes
        pyson_object[u'allowedScopes'] = list( self._allowed_scopes )
        pyson_object[u'identityTokenLifetime'] = self._identity_token_lifetime
        pyson_object[u'accessTokenLifetime'] = self._access_token_lifetime
        pyson_object[u'authorizationCodeLifetime'] = self._authorization_code_lifetime
        pyson_object[u'absoluteRefreshTokenLifetime'] = self._absolute_refresh_token_lifetime
        pyson_object[u'slidingRefreshTokenLifetime'] = self._sliding_refresh_token_lifetime
        pyson_object[u'refreshTokenUsage'] = self._refresh_token_usage
        pyson_object[u'updateAccessTokenClaimsOnRefresh'] = self._update_access_token_claims_on_refresh
        pyson_object[u'refreshTokenExpiration'] = self._refresh_token_expiration
        pyson_object[u'accessTokenType'] = self._access_token_type
        pyson_object[u'enableLocalLogin'] = self._enable_local_login
        pyson_object[u'identityProviderRestrictions'] = list( self._identity_provider_restrictions )
        pyson_object[u'includeJwtId'] = self._include_jwt_id
        #Complex Copy of claims
        claims_result = []
        for item_from_claims in self._claims:
            claims_result.append(item_from_claims.to_pyson())
        pyson_object[u'claims'] = claims_result
        pyson_object[u'alwaysSendClientClaims'] = self._always_send_client_claims
        pyson_object[u'prefixClientClaims'] = self._prefix_client_claims
        pyson_object[u'allowAccessToAllCustomGrantTypes'] = self._allow_access_to_all_custom_grant_types
        pyson_object[u'allowedCustomGrantTypes'] = list( self._allowed_custom_grant_types )
        pyson_object[u'allowedCorsOrigins'] = list( self._allowed_cors_origins )
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        if u'enabled' in pyson_object:
            self._enabled = pyson_object[u'enabled']

        if u'clientId' in pyson_object:
            self._client_id = pyson_object[u'clientId']

        if u'clientSecrets' in pyson_object:
            self._client_secrets = []
            client_secrets_json_list = pyson_object[u'clientSecrets']
            for client_secrets_json_element in client_secrets_json_list:
                client_secrets_odata_type = u'#IdentityServer3.Core.Models.Secret'
                if u'@odata.type' in client_secrets_json_element:
                    client_secrets_odata_type = client_secrets_json_element[u'@odata.type']
                new_element = _ResolveOdataType.getNewObject(client_secrets_odata_type)
                new_element.from_pyson(client_secrets_json_element)
                self._client_secrets.append(new_element)
        if u'clientName' in pyson_object:
            self._client_name = pyson_object[u'clientName']

        if u'clientUri' in pyson_object:
            self._client_uri = pyson_object[u'clientUri']

        if u'logoUri' in pyson_object:
            self._logo_uri = pyson_object[u'logoUri']

        if u'requireConsent' in pyson_object:
            self._require_consent = pyson_object[u'requireConsent']

        if u'allowRememberConsent' in pyson_object:
            self._allow_remember_consent = pyson_object[u'allowRememberConsent']

        if u'flow' in pyson_object:
            self._flow = pyson_object[u'flow']

        if u'allowClientCredentialsOnly' in pyson_object:
            self._allow_client_credentials_only = pyson_object[u'allowClientCredentialsOnly']

        if u'redirectUris' in pyson_object:
            self._redirect_uris = list(pyson_object[u'redirectUris'])

        if u'postLogoutRedirectUris' in pyson_object:
            self._post_logout_redirect_uris = list(pyson_object[u'postLogoutRedirectUris'])

        if u'allowAccessToAllScopes' in pyson_object:
            self._allow_access_to_all_scopes = pyson_object[u'allowAccessToAllScopes']

        if u'allowedScopes' in pyson_object:
            self._allowed_scopes = list(pyson_object[u'allowedScopes'])

        if u'identityTokenLifetime' in pyson_object:
            self._identity_token_lifetime = pyson_object[u'identityTokenLifetime']

        if u'accessTokenLifetime' in pyson_object:
            self._access_token_lifetime = pyson_object[u'accessTokenLifetime']

        if u'authorizationCodeLifetime' in pyson_object:
            self._authorization_code_lifetime = pyson_object[u'authorizationCodeLifetime']

        if u'absoluteRefreshTokenLifetime' in pyson_object:
            self._absolute_refresh_token_lifetime = pyson_object[u'absoluteRefreshTokenLifetime']

        if u'slidingRefreshTokenLifetime' in pyson_object:
            self._sliding_refresh_token_lifetime = pyson_object[u'slidingRefreshTokenLifetime']

        if u'refreshTokenUsage' in pyson_object:
            self._refresh_token_usage = pyson_object[u'refreshTokenUsage']

        if u'updateAccessTokenClaimsOnRefresh' in pyson_object:
            self._update_access_token_claims_on_refresh = pyson_object[u'updateAccessTokenClaimsOnRefresh']

        if u'refreshTokenExpiration' in pyson_object:
            self._refresh_token_expiration = pyson_object[u'refreshTokenExpiration']

        if u'accessTokenType' in pyson_object:
            self._access_token_type = pyson_object[u'accessTokenType']

        if u'enableLocalLogin' in pyson_object:
            self._enable_local_login = pyson_object[u'enableLocalLogin']

        if u'identityProviderRestrictions' in pyson_object:
            self._identity_provider_restrictions = list(pyson_object[u'identityProviderRestrictions'])

        if u'includeJwtId' in pyson_object:
            self._include_jwt_id = pyson_object[u'includeJwtId']

        if u'claims' in pyson_object:
            self._claims = []
            claims_json_list = pyson_object[u'claims']
            for claims_json_element in claims_json_list:
                claims_odata_type = u'#System.Security.Claims.Claim'
                if u'@odata.type' in claims_json_element:
                    claims_odata_type = claims_json_element[u'@odata.type']
                new_element = _ResolveOdataType.getNewObject(claims_odata_type)
                new_element.from_pyson(claims_json_element)
                self._claims.append(new_element)
        if u'alwaysSendClientClaims' in pyson_object:
            self._always_send_client_claims = pyson_object[u'alwaysSendClientClaims']

        if u'prefixClientClaims' in pyson_object:
            self._prefix_client_claims = pyson_object[u'prefixClientClaims']

        if u'allowAccessToAllCustomGrantTypes' in pyson_object:
            self._allow_access_to_all_custom_grant_types = pyson_object[u'allowAccessToAllCustomGrantTypes']

        if u'allowedCustomGrantTypes' in pyson_object:
            self._allowed_custom_grant_types = list(pyson_object[u'allowedCustomGrantTypes'])

        if u'allowedCorsOrigins' in pyson_object:
            self._allowed_cors_origins = list(pyson_object[u'allowedCorsOrigins'])

        return pyson_object


class AuthCode(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.RestBroker.Models.AuthCode'
        self._id = u""
        self._key = u""
        self._subject_id = u""
        self._client_id = u""
        self._token_json = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _id = None
    _key = None
    _subject_id = None
    _client_id = None
    _token_json = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def key(self):
        return self._key

    @key.setter
    def key(self, value):
        self._key = value

    @property
    def subject_id(self):
        return self._subject_id

    @subject_id.setter
    def subject_id(self, value):
        self._subject_id = value

    @property
    def client_id(self):
        return self._client_id

    @client_id.setter
    def client_id(self, value):
        self._client_id = value

    @property
    def token_json(self):
        return self._token_json

    @token_json.setter
    def token_json(self, value):
        self._token_json = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'id'] = self._id
        pyson_object[u'key'] = self._key
        pyson_object[u'subjectId'] = self._subject_id
        pyson_object[u'clientId'] = self._client_id
        pyson_object[u'tokenJson'] = self._token_json
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        if u'key' in pyson_object:
            self._key = pyson_object[u'key']

        if u'subjectId' in pyson_object:
            self._subject_id = pyson_object[u'subjectId']

        if u'clientId' in pyson_object:
            self._client_id = pyson_object[u'clientId']

        if u'tokenJson' in pyson_object:
            self._token_json = pyson_object[u'tokenJson']

        return pyson_object


class RefreshTokenHandle(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.RestBroker.Models.RefreshTokenHandle'
        self._id = u""
        self._key = u""
        self._subject_id = u""
        self._client_id = u""
        self._token_json = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _id = None
    _key = None
    _subject_id = None
    _client_id = None
    _token_json = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def key(self):
        return self._key

    @key.setter
    def key(self, value):
        self._key = value

    @property
    def subject_id(self):
        return self._subject_id

    @subject_id.setter
    def subject_id(self, value):
        self._subject_id = value

    @property
    def client_id(self):
        return self._client_id

    @client_id.setter
    def client_id(self, value):
        self._client_id = value

    @property
    def token_json(self):
        return self._token_json

    @token_json.setter
    def token_json(self, value):
        self._token_json = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'id'] = self._id
        pyson_object[u'key'] = self._key
        pyson_object[u'subjectId'] = self._subject_id
        pyson_object[u'clientId'] = self._client_id
        pyson_object[u'tokenJson'] = self._token_json
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        if u'key' in pyson_object:
            self._key = pyson_object[u'key']

        if u'subjectId' in pyson_object:
            self._subject_id = pyson_object[u'subjectId']

        if u'clientId' in pyson_object:
            self._client_id = pyson_object[u'clientId']

        if u'tokenJson' in pyson_object:
            self._token_json = pyson_object[u'tokenJson']

        return pyson_object


class TokenHandle(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.RestBroker.Models.TokenHandle'
        self._id = u""
        self._key = u""
        self._subject_id = u""
        self._client_id = u""
        self._token_json = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _id = None
    _key = None
    _subject_id = None
    _client_id = None
    _token_json = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    @property
    def key(self):
        return self._key

    @key.setter
    def key(self, value):
        self._key = value

    @property
    def subject_id(self):
        return self._subject_id

    @subject_id.setter
    def subject_id(self, value):
        self._subject_id = value

    @property
    def client_id(self):
        return self._client_id

    @client_id.setter
    def client_id(self, value):
        self._client_id = value

    @property
    def token_json(self):
        return self._token_json

    @token_json.setter
    def token_json(self, value):
        self._token_json = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'id'] = self._id
        pyson_object[u'key'] = self._key
        pyson_object[u'subjectId'] = self._subject_id
        pyson_object[u'clientId'] = self._client_id
        pyson_object[u'tokenJson'] = self._token_json
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        if u'key' in pyson_object:
            self._key = pyson_object[u'key']

        if u'subjectId' in pyson_object:
            self._subject_id = pyson_object[u'subjectId']

        if u'clientId' in pyson_object:
            self._client_id = pyson_object[u'clientId']

        if u'tokenJson' in pyson_object:
            self._token_json = pyson_object[u'tokenJson']

        return pyson_object


class RestTransaction(object):

    def __init__(self):
        self._odata_type = u'#Sel.Sel5056.Common.RestBroker.Models.RestTransaction'
        self._id = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _id = None

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, value):
        self._id = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'id'] = self._id
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'id' in pyson_object:
            self._id = pyson_object[u'id']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.DataBroker



class DataBrokerPermission(Permission):

    def __init__(self):
        super(DataBrokerPermission, self).__init__()
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.DataBrokerPermission'
        self._data_type = u""
        self._tree = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _data_type = None
    _tree = None

    @property
    def data_type(self):
        return self._data_type

    @data_type.setter
    def data_type(self, value):
        self._data_type = value

    @property
    def tree(self):
        return self._tree

    @tree.setter
    def tree(self, value):
        self._tree = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        super(DataBrokerPermission, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'dataType'] = self._data_type
        pyson_object[u'tree'] = self._tree
        return pyson_object

    def from_pyson(self,pyson_object):
        super(DataBrokerPermission, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'dataType' in pyson_object:
            self._data_type = pyson_object[u'dataType']

        if u'tree' in pyson_object:
            self._tree = pyson_object[u'tree']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.DataBroker.Types



class SecurityAttributePermission(Permission):

    def __init__(self):
        super(SecurityAttributePermission, self).__init__()
        self._odata_type = u'#Sel.Sel5056.Common.DataBroker.Types.SecurityAttributePermission'
        self._security_attribute = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _security_attribute = None

    @property
    def security_attribute(self):
        return self._security_attribute

    @security_attribute.setter
    def security_attribute(self, value):
        self._security_attribute = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        super(SecurityAttributePermission, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'securityAttribute'] = self._security_attribute
        return pyson_object

    def from_pyson(self,pyson_object):
        super(SecurityAttributePermission, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'securityAttribute' in pyson_object:
            self._security_attribute = pyson_object[u'securityAttribute']

        return pyson_object
# Odata Namespace Sel.Sel5056.Common.SecurityManager



class LDAPAuthService(AuthService):

    def __init__(self):
        super(LDAPAuthService, self).__init__()
        self._odata_type = u'#Sel.Sel5056.Common.SecurityManager.LDAPAuthService'
        self._name = u""
        self._server_address = u""
        self._server_port = 0
        self._use_ssl = False
        self._bind_user_name = u""
        self._bind_password = u""
        self._user_id_filter = u""
        self._search_base = u""
        self._group_membership_attribute = u""
        self._first_name = u""
        self._last_name = u""
        self._email = u""
        self._work_phone = u""
        self._auth_type = u""
        self._protocol_version = 0
        self._error_log = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _name = None
    _server_address = None
    _server_port = None
    _use_ssl = None
    _bind_user_name = None
    _bind_password = None
    _user_id_filter = None
    _search_base = None
    _group_membership_attribute = None
    _first_name = None
    _last_name = None
    _email = None
    _work_phone = None
    _auth_type = None
    _protocol_version = None
    _error_log = []

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    @property
    def server_address(self):
        return self._server_address

    @server_address.setter
    def server_address(self, value):
        self._server_address = value

    @property
    def server_port(self):
        return self._server_port

    @server_port.setter
    def server_port(self, value):
        self._server_port = value

    @property
    def use_ssl(self):
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, value):
        self._use_ssl = value

    @property
    def bind_user_name(self):
        return self._bind_user_name

    @bind_user_name.setter
    def bind_user_name(self, value):
        self._bind_user_name = value

    @property
    def bind_password(self):
        return self._bind_password

    @bind_password.setter
    def bind_password(self, value):
        self._bind_password = value

    @property
    def user_id_filter(self):
        return self._user_id_filter

    @user_id_filter.setter
    def user_id_filter(self, value):
        self._user_id_filter = value

    @property
    def search_base(self):
        return self._search_base

    @search_base.setter
    def search_base(self, value):
        self._search_base = value

    @property
    def group_membership_attribute(self):
        return self._group_membership_attribute

    @group_membership_attribute.setter
    def group_membership_attribute(self, value):
        self._group_membership_attribute = value

    @property
    def first_name(self):
        return self._first_name

    @first_name.setter
    def first_name(self, value):
        self._first_name = value

    @property
    def last_name(self):
        return self._last_name

    @last_name.setter
    def last_name(self, value):
        self._last_name = value

    @property
    def email(self):
        return self._email

    @email.setter
    def email(self, value):
        self._email = value

    @property
    def work_phone(self):
        return self._work_phone

    @work_phone.setter
    def work_phone(self, value):
        self._work_phone = value

    @property
    def auth_type(self):
        return self._auth_type

    @auth_type.setter
    def auth_type(self, value):
        self._auth_type = value

    @property
    def protocol_version(self):
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, value):
        self._protocol_version = value

    @property
    def error_log(self):
        return self._error_log

    @error_log.setter
    def error_log(self, value):
        self._error_log = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        super(LDAPAuthService, self)._add_pyson(pyson_object)
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'name'] = self._name
        pyson_object[u'serverAddress'] = self._server_address
        pyson_object[u'serverPort'] = self._server_port
        pyson_object[u'useSSL'] = self._use_ssl
        pyson_object[u'bindUserName'] = self._bind_user_name
        pyson_object[u'bindPassword'] = self._bind_password
        pyson_object[u'userIdFilter'] = self._user_id_filter
        pyson_object[u'searchBase'] = self._search_base
        pyson_object[u'groupMembershipAttribute'] = self._group_membership_attribute
        pyson_object[u'firstName'] = self._first_name
        pyson_object[u'lastName'] = self._last_name
        pyson_object[u'email'] = self._email
        pyson_object[u'workPhone'] = self._work_phone
        pyson_object[u'authType'] = self._auth_type
        pyson_object[u'protocolVersion'] = self._protocol_version
        pyson_object[u'errorLog'] = list( self._error_log )
        return pyson_object

    def from_pyson(self,pyson_object):
        super(LDAPAuthService, self)._parse_pyson(pyson_object)
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'name' in pyson_object:
            self._name = pyson_object[u'name']

        if u'serverAddress' in pyson_object:
            self._server_address = pyson_object[u'serverAddress']

        if u'serverPort' in pyson_object:
            self._server_port = pyson_object[u'serverPort']

        if u'useSSL' in pyson_object:
            self._use_ssl = pyson_object[u'useSSL']

        if u'bindUserName' in pyson_object:
            self._bind_user_name = pyson_object[u'bindUserName']

        if u'bindPassword' in pyson_object:
            self._bind_password = pyson_object[u'bindPassword']

        if u'userIdFilter' in pyson_object:
            self._user_id_filter = pyson_object[u'userIdFilter']

        if u'searchBase' in pyson_object:
            self._search_base = pyson_object[u'searchBase']

        if u'groupMembershipAttribute' in pyson_object:
            self._group_membership_attribute = pyson_object[u'groupMembershipAttribute']

        if u'firstName' in pyson_object:
            self._first_name = pyson_object[u'firstName']

        if u'lastName' in pyson_object:
            self._last_name = pyson_object[u'lastName']

        if u'email' in pyson_object:
            self._email = pyson_object[u'email']

        if u'workPhone' in pyson_object:
            self._work_phone = pyson_object[u'workPhone']

        if u'authType' in pyson_object:
            self._auth_type = pyson_object[u'authType']

        if u'protocolVersion' in pyson_object:
            self._protocol_version = pyson_object[u'protocolVersion']

        if u'errorLog' in pyson_object:
            self._error_log = list(pyson_object[u'errorLog'])

        return pyson_object
# Odata Namespace IdentityServer3.Core.Models


class Flows(object):

    @staticmethod
    def authorization_code():
        return u"AuthorizationCode"

    @staticmethod
    def implicit():
        return u"Implicit"

    @staticmethod
    def hybrid():
        return u"Hybrid"

    @staticmethod
    def client_credentials():
        return u"ClientCredentials"

    @staticmethod
    def resource_owner():
        return u"ResourceOwner"

    @staticmethod
    def custom():
        return u"Custom"

class TokenUsage(object):

    @staticmethod
    def re_use():
        return u"ReUse"

    @staticmethod
    def one_time_only():
        return u"OneTimeOnly"

class TokenExpiration(object):

    @staticmethod
    def sliding():
        return u"Sliding"

    @staticmethod
    def absolute():
        return u"Absolute"

class AccessTokenType(object):

    @staticmethod
    def jwt():
        return u"Jwt"

    @staticmethod
    def reference():
        return u"Reference"


class Secret(object):

    def __init__(self):
        self._odata_type = u'#IdentityServer3.Core.Models.Secret'
        self._description = u""
        self._value = u""
        self._expiration = datetime.datetime.fromtimestamp(0)  # the *nix epoch
        self._type = u""

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _description = None
    _value = None
    _expiration = None
    _type = None

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, value):
        self._description = value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, value):
        self._value = value

    @property
    def expiration(self):
        return self._expiration

    @expiration.setter
    def expiration(self, value):
        self._expiration = value

    @property
    def type(self):
        return self._type

    @type.setter
    def type(self, value):
        self._type = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        pyson_object[u'description'] = self._description
        pyson_object[u'value'] = self._value
        pyson_object[u'expiration'] = self._expiration
        pyson_object[u'type'] = self._type
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'description' in pyson_object:
            self._description = pyson_object[u'description']

        if u'value' in pyson_object:
            self._value = pyson_object[u'value']

        if u'expiration' in pyson_object:
            self._expiration = pyson_object[u'expiration']

        if u'type' in pyson_object:
            self._type = pyson_object[u'type']

        return pyson_object
# Odata Namespace System.Security.Claims



class Claim(object):

    def __init__(self):
        self._odata_type = u'#System.Security.Claims.Claim'
        self._properties = []

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string

    _properties = []

    @property
    def properties(self):
        return self._properties

    @properties.setter
    def properties(self, value):
        self._properties = value

    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        #Complex Copy of properties
        properties_result = []
        for item_from_properties in self._properties:
            properties_result.append(item_from_properties.to_pyson())
        pyson_object[u'properties'] = properties_result
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        if u'properties' in pyson_object:
            self._properties = []
            properties_json_list = pyson_object[u'properties']
            for properties_json_element in properties_json_list:
                properties_odata_type = u'#System.Collections.Generic.KeyValuePair_2OfString_String'
                if u'@odata.type' in properties_json_element:
                    properties_odata_type = properties_json_element[u'@odata.type']
                new_element = _ResolveOdataType.getNewObject(properties_odata_type)
                new_element.from_pyson(properties_json_element)
                self._properties.append(new_element)
        return pyson_object
# Odata Namespace System.Collections.Generic



class KeyValuePair_2OfString_String(object):

    def __init__(self):
        self._odata_type = u'#System.Collections.Generic.KeyValuePair_2OfString_String'

    def from_json(self, json_string):
        pyson_object = json.loads(json_string)
        self.from_pyson(pyson_object)
        return self

    def to_json(self):
        pyson_object = self.to_pyson()
        json_string = json.dumps(pyson_object, sort_keys=True, indent=4, separators=(u',', u': '))
        return json_string


    def to_pyson(self):
        pyson_object = {u'@odata.type': self._odata_type}
        self._add_pyson(pyson_object)
        return pyson_object

    def _add_pyson(self, pyson_object):
        return pyson_object

    def from_pyson(self,pyson_object):
        self._parse_pyson(pyson_object)
        return pyson_object

    def _parse_pyson(self, pyson_object):
        return pyson_object
# Odata Namespace Sel


#
#Begin IOC Container Definition (Dependency Resolvers)
#
class _ResolveOdataType(object):

    @staticmethod
    def getNewObject(odata_type):
        result = None
        if odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.Permission":
            result = Permission()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.Role":
            result = Role()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.User":
            result = User()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.AuthService":
            result = AuthService()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.ModuleRole":
            result = ModuleRole()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.AuthServiceUser":
            result = AuthServiceUser()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityManager.LocalUser":
            result = LocalUser()
        elif odata_type == u"#Sel.Sel5056.Common.RestBroker.Models.OauthClient":
            result = OauthClient()
        elif odata_type == u"#Sel.Sel5056.Common.RestBroker.Models.AuthCode":
            result = AuthCode()
        elif odata_type == u"#Sel.Sel5056.Common.RestBroker.Models.RefreshTokenHandle":
            result = RefreshTokenHandle()
        elif odata_type == u"#Sel.Sel5056.Common.RestBroker.Models.TokenHandle":
            result = TokenHandle()
        elif odata_type == u"#Sel.Sel5056.Common.RestBroker.Models.RestTransaction":
            result = RestTransaction()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.DataBrokerPermission":
            result = DataBrokerPermission()
        elif odata_type == u"#Sel.Sel5056.Common.DataBroker.Types.SecurityAttributePermission":
            result = SecurityAttributePermission()
        elif odata_type == u"#Sel.Sel5056.Common.SecurityManager.LDAPAuthService":
            result = LDAPAuthService()
        elif odata_type == u"#IdentityServer3.Core.Models.Secret":
            result = Secret()
        elif odata_type == u"#System.Security.Claims.Claim":
            result = Claim()
        elif odata_type == u"#System.Collections.Generic.KeyValuePair_2OfString_String":
            result = KeyValuePair_2OfString_String()
        return result



