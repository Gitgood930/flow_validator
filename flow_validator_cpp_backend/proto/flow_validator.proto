syntax = "proto3";

package flow_validator;

service FlowValidator {

  rpc Initialize(NetworkGraph) returns (InitializeInfo) {}

  rpc ValidatePolicy(Policy) returns (ValidatePolicyInfo) {}

  rpc GetTimeToDisconnect(MonteCarloParams) returns (TimeToDisconnectInfo) {}

}

message MonteCarloParams {
    float link_failure_rate = 1;
    repeated PolicyPort src_ports = 2;
    repeated PolicyPort dst_ports = 3;
}

message TimeToDisconnectInfo {
    float mean = 1;
    float sd = 2;
    float time_taken = 3;
}

message InitializeInfo {
    bool successful = 1;
    float time_taken = 2; 
}

message ValidatePolicyInfo {
    bool successful = 1;
    float time_taken = 2;
    repeated PolicyViolation violations = 3;
}

message Port {
    uint64 port_num = 1;
    string hw_addr = 2;
}

message Action {
    string type = 1;
    string modified_field = 2;
    uint64 modified_value = 3;
    uint64 output_port_num = 4;
    int32 group_id = 5;
}

message Bucket {
    uint64 watch_port_num = 1;
    int32 weight = 2;
    repeated Action actions = 3;
}

message Group {
    string type = 1;
    int32 id = 2;
    repeated Bucket buckets = 3;
}

message FlowRuleMatchFieldVal {
    uint64 value_start = 1;
    uint64 value_end = 2;
}

message Instruction {
    string type = 1;
    repeated Action actions = 2;
    int32 go_to_table_num = 3;
}

message FlowRule {
    int32 priority = 1;
    map<string, FlowRuleMatchFieldVal> flow_rule_match = 2;
    repeated Instruction instructions = 3;
}

message FlowTable {
    int32 table_num = 1;
    repeated FlowRule flow_rules = 2;
}

message Switch {
    string switch_id = 1;
    repeated Port ports = 2;
    repeated FlowTable flow_tables = 3;
    repeated Group group_table = 4;
}

message Host {
    string host_name = 1;
    string host_MAC = 2;
    string host_IP = 3;
    string host_switch_id = 4;
}

message Link {
    string src_node = 1;
    uint64 src_port_num = 2;
    string dst_node = 3;
    uint64 dst_port_num = 4;
}

message NetworkGraph {
    string controller = 1;
    repeated Switch switches = 2;
    repeated Host hosts = 3;
    repeated Link links = 4;
}

message PolicyPort {
    string switch_id = 1;
    uint64 port_num = 2;
}

message Zone {
    repeated PolicyPort ports = 1;
}

message Constraint {
    string type = 1;
    int32 path_length = 2;
    repeated Link avoid_links = 3;
}

message Lmbda {
    repeated Link links = 1;
}

message PolicyStatement {
  Zone src_zone = 1;
  Zone dst_zone = 2;
  map<string, uint64> policy_match = 3;
  repeated Constraint constraints = 4;
  repeated Lmbda lmbdas = 5;
}

message Policy {
    repeated PolicyStatement policy_statements = 1;
}

message PolicyViolation {
  Lmbda lmbda = 1;
  PolicyPort src_port = 2;
  PolicyPort dst_port = 3;
  string constraint_type = 4;
  string counter_example = 5;
}